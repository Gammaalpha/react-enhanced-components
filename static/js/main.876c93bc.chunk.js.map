{"version":3,"sources":["core/Button/BaseButton.tsx","core/Button/BorderedButton.tsx","core/Checkbox/Checkbox.tsx","core/DataTable/DataTable.tsx","core/DialogBox/DialogBox.tsx","core/Styles/CommonStyles.ts","core/MarkdownEditor/MarkdownPreviewArea/MarkdownPreviewArea.tsx","core/MarkdownEditor/model/Types.ts","core/utils/util-escape-regexp.ts","core/Menu/Menu.tsx","core/MarkdownEditor/ButtonsToolbar/ComboButton/ComboButton.tsx","core/MarkdownEditor/ButtonsToolbar/AbbrDialog/AbbrDialog.tsx","core/utils/util-is-url-valid.ts","core/MarkdownEditor/ButtonsToolbar/LinkDialog/LinkDialog.tsx","core/MarkdownEditor/ButtonsToolbar/ImageDialog/ImageDialog.tsx","core/MarkdownEditor/ButtonsToolbar/ButtonsToolbar.tsx","core/utils/util-get-side-characters.ts","core/utils/util-wrapper.ts","core/MarkdownEditor/MarkdownInputArea/MarkdownInputArea.tsx","core/MarkdownEditor/MarkdownEditor.tsx","core/RichTextEditor/QuillEditor/QuillEditor.tsx","core/RichTextEditor/model/RichText.ts","core/RichTextEditor/CreateStyleButton.tsx","core/RichTextEditor/AbbrDialog/AbbrDialog.tsx","core/RichTextEditor/LinkDialog/LinkDialog.tsx","core/RichTextEditor/FontColorButton/FontColorButton.tsx","core/RichTextEditor/ImageDialog/ImageDialog.tsx","core/RichTextEditor/CustomToolbar/CustomToolbar.tsx","core/RichTextEditor/RichTextEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BaseButton","styled","button","BorderedButton","StyledCheckbox","input","attrs","type","Checkbox","props","generateClassName","createGenerateClassName","productionPrefix","useStyles","makeStyles","chips","margin","muiWrap","display","flexDirection","justifyContent","flexWrap","alignItems","searchFieldInput","width","tableHeader","backgroundColor","tableHeaderCell","color","fontWeight","fullWidth","row","visuallyHidden","width_1","circleStyle","height","borderRadius","MozBorderRadius","DataTable","classes","useState","dataSource","dataItems","selected","setSelected","order","setOrder","orderBy","setOrderBy","page","setPage","setChips","undefined","rowsPerPage","setRowsPerPage","multiSortArray","setMultiSortArray","searchField","useRef","rowsPerPageOptions","styleHeader","header","customStyle","headerCell","tableItemsCount","pages","dataItemsGlobal","dataItemsGlobalFiltered","handleChipDelete","chipToDelete","length","filter","chip","key","clearAll","style","paddingBottom","Tooltip","title","IconButton","onClick","aria-label","Clear","handleChipAdd","termInput","term","trim","newChip","label","findIndex","newChips","sortHandler","headerKey","tempArray","index","x","push","multiSort","splice","multiSortArrayHandler","getHeaderSortInfo","find","getHeaderIndex","createHeader","tableHeaders","headers","forEach","TableCell","variant","align","className","sortDirection","TableSortLabel","disabled","sort","icon","active","direction","text","TableRow","checkbox","onChange","event","target","checked","newSelects","map","n","itemKey","handleSelectAllClick","inputProps","updatePages","tableItems","updatedPages","tableRows","paginatedRows","pagesCount","Math","ceil","start","end","paginateSlice","slice","paginate","createRows","sortOrderKey","sortOrder","tableCellStyle","bodyCell","a","b","toString","toUpperCase","localeCompare","dynamicSort","filterTerms","inputData","keys","Object","filteredData","data","toLowerCase","includes","finalCount","item","getTotalItemsCount","emittedData","colSpan","console","log","rowItem","name","labelId","isItemSelected","indexOf","tableRow","cell","hover","aria-checked","tabIndex","role","selectedIndex","newSelected","concat","handleClick","emptySpacing","emptyRows","sel","dataEmit","emit","StylesProvider","id","TextField","inputRef","InputProps","startAdornment","Chip","onDelete","helperText","onKeyUp","e","current","value","lastChip","replace","multiline","TableContainer","Table","TableHead","TableBody","TablePagination","component","count","onChangePage","number","_page","handleChangePage","onChangeRowsPerPage","parseInt","handleChangeRowsPerPage","Wrapper","div","Backdrop","StyledModal","fadeType","Header","HeaderText","CloseButton","Content","DialogBox","fade","setFade","transitionEnd","propertyName","onClose","useEffect","open","window","addEventListener","onEscKeyDown","setTimeout","removeEventListener","preventDefault","ReactDOM","createPortal","Fragment","class","onTransitionEnd","children","document","body","fontStyle","ToolbarButton","Label","StyledInput","Row","gap","flex","maxHeight","minHeight","padding","ErrorMessage","span","Column","StyledTextarea","textarea","MainContainer","MarkdownBody","overflowY","ToolbarRow","PreviewTitle","Bordered","bordered","RedSup","sup","rehypePicture","require","rehypeUrls","slug","toc","rehypeHighlight","remarkGfm","remarkHeading","remarkMidas","MarkdownPreviewArea","content","setContent","previewRef","processor","_content","markdown_processor","unified","use","markdown","RemarkUnderline","RemarkAbbr","remark2rehype","allowDangerousHtml","rehypeRaw","url","node","host","properties","rehypeSanitize","rehype2react","createElement","React","processSync","result","error","message","previewRefCallback","editable","borderedPreview","ref","TextStyleType","InsertType","HeadingType","utilEscapeRegExp","inputString","MenuButton","MenuDropdownList","MenuItem","Menu","ddButton","isListOpen","setIsListOpen","handleChange","ev","contains","prevListState","val","usePrevious","ariaLabel","leftIcon","render","MenuDropdownItem","ComboButton","isOpen","setIsOpen","buttonData","options","callback","AbbrDialog","setOpen","errors","setErrors","abbrData","setAbbrData","handleClose","validate","values","onSubmit","topInsert","textInsert","noValidate","htmlFor","isURLValid","test","LinkDialog","urlValidateError","setUrlValidateError","global","linkData","setLinkData","ImageDialog","urlError","setUrlError","packageImage","ButtonsToolbar","buttonsArray","tooltip","toolbarActions","_onInsertText","h1","h2","h3","h4","h5","h6","_onTextFormatClick","bold","italic","underline","strike","super","sub","unorderedList","orderedList","table","dialogButtons","image","link","abbr","abbreviation","incomingData","insertCmd","regexSplit","regex","RegExp","char","endChar","newLines","split","line","side","matchValidation","reverse","join","utilGetSideChars","sideCheck","enclose","wrapCharStart","wrapCharEnd","regexSplitter","utilWrapper","buttonArr","btn","toolbarComboButton","createToolbarButtons","MarkdownInputArea","selectedText","setSelectedText","selection","setSelection","editorRef","inputContent","setInputContent","scrollPosition","setScrollPosition","getScrollPosition","position","scrollTop","offsetHeight","scrollHeight","scrollCallback","onscroll","currentPosition","substring","selectionFocusAfterEffect","startPos","endPos","setSelectionRange","focus","handleIncomingChange","newVal","tempSel","newOutput","lenChange","blur","insert","String","handleInsertCmd","insertVal","updatedContent","insertContent","updatedSelectionLoc","lastIndexOf","firstHalf","heading","secondHalf","onSelect","selectionStart","selectionEnd","onScroll","MarkdownEditor","previewRefVal","handlePreviewRef","handleInputScrollPosition","maxEditorHeight","minEditorHeight","maxEditorInputHeight","maxEditorPreviewHeight","QuillEditor","setValue","_value","contentCallback","modules","clipboard","matchVisual","toolbar","container","toolbarId","handlers","getEditor","enable","editing","editorId","defaultValue","TextAlignmentType","ListFormatType","BlockFormatType","IndentDirType","CreateStyleButton","buttonStyles","createStyles","buttonLabel","minWidth","menuWidth","paddingLeft","topPadding","paddingTop","transformNone","textTransform","displayNone","buttonRenderCustom","Icon","buttonText","buttonRenderDefault","childButtons","FormControl","buttonStyle","placement","Select","handleCallback","Button","onMouseDown","isDefault","theme","column","justifyItems","range","setAbbr","abbrButton","btnStyle","quill","quillEditor","getSelection","getLeaf","leaf","parent","domNode","tagName","textContent","innerText","getText","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","FormGroup","autoFocus","DialogActions","href","setLink","linkButton","placeholder","FormControlLabel","control","handleCheckboxChange","StyledMenu","withStyles","paper","border","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","FontColorButton","defaultColor","currColor","setCurrColor","anchorEl","setAnchorEl","buttonInfo","buttonParams","handleColorChange","hex","changeIconColor","buttonType","querySelectorAll","setAttribute","currentTarget","Boolean","onChangeComplete","formControl","spacing","initialImageState","src","alt","float","setRange","setImage","tempImage","tempRange","imgDomNode","scrollWidth","handleFloatChange","InputLabel","handleSubmit","flexGrow1","flexGrow","background","fontSize","paddingRight","cmdButton","marginRight","marginTop","marginBottom","selectEmpty","pullQuoteStyle","borderLeft","borderRight","textAlign","borderTop","borderBottom","blockStyle","Parchment","Quill","import","config","scope","Scope","BLOCK","MClass","Attributor","Class","register","SizeClass","whitelist","Embed","blockEmbed","Inline","Hr","blotName","Abbr","innerHTML","ATag","removeAttribute","TableTag","tableCount","appendChild","ImageTag","CustomToolbar","linkTagRegister","setLinkTagRegister","useReducer","state","newState","alignment","formats","selectedUrl","abbrDialog","fontColor","highlightColor","fontColorDialog","highlightDialog","urlDialog","tableDialog","setState","sizeArray","applyFormat","format","oldRange","source","selectedTextTemp","formatsTemp","getFormat","selectedUrlTemp","handleChangeSelection","clearFormatting","offset","removeFormat","innerLeaf","insertText","setCursorPosition","textLength","rangeTemp","CustomEditor","pullQuote","paragraph","_onChangeIndentClick","indent","_onScriptStyleMarkClick","scriptStyle","script","_onStyleMarkClick","newStyleValue","_onClearFormattingClick","_onAlignmentClick","alignValue","_onListClick","listType","newListValue","list","_onTextFormatColor","formatText","_onAbbrInsert","params","deleteText","insertEmbed","_onLinkInsert","_onInsertImage","rangeOnly","_onOpenSource","getContents","_onHrInsert","_onFontSizeChange","_onRowInsertBelow","_onColumnInsertRight","_onTableInsert","_onTableDelete","_onDeleteCurrentRow","_onDeleteCurrentColumn","toolbarArray","headingOne","headingTwo","headingThree","headingFour","blockquote","num","bulletedList","left","center","justify","right","FontColorButtons","textFormat","highlight","renderToolbarButtons","toolbarButtons","element","toolbarStyle","randNum","floor","random","RichTextEditor","editorRefState","setEditorRefState","handleIncomingRef","handleIncomingContent","_data","idRow","App","department","items","editor","edit","setEdit","borderPreview","setBorderPreview","toggleEditMode","toggleBorderPreview","ExpansionPanel","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","Switch","handleIncomingData","location","hostname","match","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.876c93bc.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const BaseButton = styled.button`\r\n    background-color:'gray';\r\n    background-position: center;\r\n    transition: background 0.6s;\r\n    height:40px;\r\n    min-width:40px;\r\n    margin-right:3px;\r\n    font-size: 1em;\r\n    padding: 0.25em 0.25em;\r\n    margin-bottom:3px;\r\n    border-color:#E0E0E0;\r\n    background-color:#E0E0E0;\r\n    margin-right:5px;\r\n    border-radius: 3px;\r\n    &:hover{\r\n        background: #bbbbbb radial-gradient(circle, transparent 1%, #bbbbbb 1%)\r\n    center/15000%;\r\n    }\r\n    &:active {\r\n        background-color: #bbbbbb;\r\n        background-size: 100%;\r\n        transition: background 0s;\r\n    }\r\n    &:focus{\r\n        background-color:lightgray;\r\n    }\r\n`;\r\n\r\n","import styled from 'styled-components';\r\nimport { BaseButton } from './BaseButton';\r\n\r\nexport const BorderedButton = styled(BaseButton)`\r\n background-color:'gray';\r\n    height:40px;\r\n    min-width:40px;\r\n    margin-right:3px;\r\n    font-size: 1em;\r\n    /* margin: 1em; */\r\n    padding: 0.25em 0.25em;\r\n    margin-bottom:3px;\r\n    border-color:#E0E0E0;\r\n    background-color:#E0E0E0;\r\n    margin-right:5px;\r\n    border: 2px solid lightgray;\r\n    border-radius: 3px;\r\n    &:hover{\r\n        background-color:lightgray\r\n    }\r\n    &:focus{\r\n        border:2px solid #151515;\r\n        background-color:lightgray;\r\n        outline:none\r\n    }\r\n`;\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport { fontStyle } from '../Styles/CommonStyles';\r\n\r\n\r\nconst StyledCheckbox = styled.input.attrs({ type: 'checkbox' })`\r\n    height:18px;\r\n    width:18px;\r\n`;\r\n\r\nexport function Checkbox(props: any) {\r\n    const render = () => {\r\n        return <StyledCheckbox {...props}>\r\n        </StyledCheckbox>\r\n    }\r\n\r\n    return render()\r\n}","import React, { useState, useRef } from \"react\";\r\nimport { IDataTable, Order, ChipData } from \"./model/DataTableModel\";\r\nimport {\r\n  Chip,\r\n  TextField,\r\n  Tooltip,\r\n  IconButton,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TablePagination,\r\n  TableCell,\r\n  TableSortLabel,\r\n  TableRow,\r\n  Checkbox\r\n} from \"@material-ui/core\";\r\nimport { Clear as ClearIcon } from \"@material-ui/icons\";\r\nimport { StylesProvider, makeStyles, createGenerateClassName } from '@material-ui/core/styles';\r\n\r\nconst generateClassName = createGenerateClassName({\r\n  productionPrefix: 'dt_',\r\n});\r\nconst useStyles = makeStyles({\r\n  chips: {\r\n    margin: \"10px 5px 5px 0\",\r\n  },\r\n  muiWrap: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    flexWrap: \"wrap\",\r\n    alignItems: \"center\",\r\n  },\r\n  searchFieldInput: {\r\n    width: \"auto\",\r\n  },\r\n  tableHeader: {\r\n    backgroundColor: \"rgb(80, 162, 230)\",\r\n  },\r\n  tableHeaderCell: {\r\n    color: \"black\",\r\n    fontWeight: 600,\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  visuallyHidden: {\r\n    display: \"none\",\r\n  },\r\n  width_1: {\r\n    width: \"1%\",\r\n  },\r\n  circleStyle: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: '25px',\r\n    height: '25px',\r\n    borderRadius: '30px',\r\n    MozBorderRadius: '30px',\r\n    backgroundColor: '#f5f5f5'\r\n  }\r\n});\r\n\r\n\r\ninterface Sort {\r\n  key: string;\r\n  type: \"asc\" | \"desc\" | undefined\r\n}\r\n\r\nexport function DataTable(props: IDataTable) {\r\n  const classes = useStyles(props);\r\n  const [dataItems] = useState(props.dataSource);\r\n  const [selected, setSelected] = useState<string[]>([]);\r\n  const [order, setOrder] = useState(props.order);\r\n  const [orderBy, setOrderBy] = useState(props.orderBy);\r\n  const [page, setPage] = useState(0);\r\n  const [chips, setChips] = useState([] as ChipData[]);\r\n  const [rowsPerPage, setRowsPerPage] = useState(() =>\r\n    props.rowsPerPage === undefined ? 10 : props.rowsPerPage\r\n  );\r\n  const [multiSortArray, setMultiSortArray] = useState<Sort[]>([])\r\n\r\n  const searchField: React.MutableRefObject<any> = useRef();\r\n  // let searchField = useRef(\"\");\r\n  const rowsPerPageOptions = props?.rowsPerPageOptions\r\n    ? props.rowsPerPageOptions\r\n    : [5, 10, 15];\r\n  const styleHeader = {\r\n    header: props.customStyle?.header\r\n      ? props.customStyle?.header\r\n      : classes.tableHeader,\r\n    headerCell: props.customStyle?.headerCell\r\n      ? props.customStyle?.headerCell\r\n      : classes.tableHeaderCell,\r\n  };\r\n  let tableItemsCount = 0;\r\n  let pages: any[] = [];\r\n  let dataItemsGlobal: any = dataItems;\r\n  let dataItemsGlobalFiltered: any = [];\r\n\r\n  const handleChipDelete = (chipToDelete: ChipData) => {\r\n    if (chips.length > 0) {\r\n      const chips_ = chips;\r\n      setChips(\r\n        chips_.filter((chip: ChipData) => chip.key !== chipToDelete.key)\r\n      );\r\n    }\r\n  };\r\n\r\n  const chipsRender = () => {\r\n    const chipsArray = chips.map((data: ChipData) => {\r\n      return (\r\n        <Chip\r\n          className={`${classes.chips}`}\r\n          key={data.key}\r\n          label={data.label}\r\n          onDelete={() => handleChipDelete(data)\r\n          }\r\n        />\r\n      );\r\n    });\r\n    return chipsArray;\r\n  };\r\n\r\n  const clearChips = () => {\r\n    setChips([]);\r\n    // searchField.current.value = \"\"\r\n  };\r\n\r\n  const clearAll = () => {\r\n    if (chips.length === 0) {\r\n      return <div></div>;\r\n    } else {\r\n      return (\r\n        <div style={{ paddingBottom: \"20px\" }}>\r\n          <Tooltip title=\"Clear Search Field\">\r\n            <IconButton onClick={() => clearChips()} aria-label=\"clear filter\">\r\n              <ClearIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const filterRender = () => {\r\n    const helperText =\r\n      \"Field for multi keyword search terms. Type the term you wish to find and press enter.\";\r\n\r\n    if (props.filter) {\r\n      return (\r\n        <div\r\n          className={`${classes.fullWidth} ${classes.row}`}\r\n          id=\"searchFieldTop\"\r\n        >\r\n          <TextField\r\n            inputRef={searchField}\r\n            id=\"searchField\"\r\n            fullWidth\r\n            inputProps={{\r\n              className: `${classes.searchFieldInput}`,\r\n            }}\r\n            InputProps={{\r\n              className: `${classes.muiWrap}`,\r\n              startAdornment: chipsRender(),\r\n            }}\r\n            helperText={helperText}\r\n            onKeyUp={(e: any) => {\r\n              if (\r\n                e.key === \"Backspace\" &&\r\n                searchField.current.value === \"\" &&\r\n                chips.length > 0\r\n              ) {\r\n                let lastChip: ChipData = chips[chips.length - 1];\r\n                handleChipDelete(lastChip);\r\n                searchField.current.value = \" \" + lastChip.label;\r\n              }\r\n              if (e.key === \"Enter\") {\r\n                if (e.target.value.trim() !== undefined && e.target.value !== \"\") {\r\n                  handleChipAdd(sanitize(e.target.value));\r\n                  searchField.current.value = \"\";\r\n                }\r\n              }\r\n            }}\r\n            multiline={false}\r\n            label=\"Search field\"\r\n            aria-label=\"Search field - multi term\"\r\n            type=\"search\"\r\n            variant=\"outlined\"\r\n          />\r\n          {clearAll()}\r\n        </div>\r\n      );\r\n    }\r\n    return <div></div>;\r\n  };\r\n\r\n  const handleChipAdd = (termInput: any) => {\r\n    let term = termInput.trim();\r\n    const chipLen = chips.length;\r\n    const newChip: ChipData = {\r\n      key: chipLen,\r\n      label: term,\r\n    };\r\n    const index = chips.findIndex((chip: ChipData) => chip.label === term);\r\n    if (index === -1) {\r\n      const newChips = [...chips, newChip];\r\n      setChips(newChips);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event: any, _page: number) => {\r\n    if (event) {\r\n      setPage(_page);\r\n    }\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: any) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const multiSortArrayHandler = (headerKey: string) => {\r\n    const tempArray: Sort[] = multiSortArray;\r\n    const index = tempArray.findIndex((x) => x.key === headerKey)\r\n\r\n    if (index === -1) {\r\n      tempArray.push({ key: headerKey, type: 'asc' })\r\n    }\r\n\r\n    else {\r\n      switch (tempArray[index]?.type) {\r\n        case 'asc':\r\n          tempArray[index].type = 'desc'\r\n          break;\r\n        case 'desc':\r\n          props?.multiSort ? tempArray.splice(index, 1) : tempArray[index].type = 'asc';\r\n          break;\r\n        case undefined:\r\n          tempArray[index].type = 'asc'\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    if (!props?.multiSort) {\r\n      setMultiSortArray([tempArray[tempArray.length - 1]])\r\n    }\r\n    else {\r\n      setMultiSortArray(tempArray)\r\n    }\r\n  }\r\n\r\n  const sortHandler = (headerKey: string) => {\r\n    const isAsc = orderBy === headerKey && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(headerKey);\r\n    multiSortArrayHandler(headerKey)\r\n\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n    if (event.target.checked) {\r\n      const newSelects = dataItemsGlobalFiltered.map(\r\n        (n: any) => n[props.itemKey]\r\n      );\r\n      setSelected(newSelects);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const getHeaderSortInfo = (headerKey: string): Sort | undefined => {\r\n    return multiSortArray.find(x => x.key === headerKey)\r\n  }\r\n\r\n  const getHeaderIndex = (headerKey: string): number => {\r\n    const index = multiSortArray.findIndex(x => x.key === headerKey)\r\n    return index > -1 ? index + 1 : 0\r\n  }\r\n\r\n  const createHeader = () => {\r\n    const tableHeaders: any[] = [];\r\n    props.headers.forEach((header) => {\r\n      tableHeaders.push(\r\n        <TableCell\r\n          variant=\"head\"\r\n          align={header.align}\r\n          className={`${styleHeader.headerCell} MuiColumnHeader_${header.key}`}\r\n          key={header.key}\r\n          sortDirection={getHeaderSortInfo(header.key)?.key === header.key ? getHeaderSortInfo(header.key)?.type : false}\r\n        >\r\n          <div className={classes.row}>\r\n            <TableSortLabel\r\n              disabled={header?.sort === undefined ? header.sort : true}\r\n              classes={{\r\n                icon:\r\n                  getHeaderSortInfo(header.key)?.key === header.key ? \"activeSortCell\" : \"inactiveSortCell\",\r\n                active:\r\n                  getHeaderSortInfo(header.key)?.key === header.key ? \"activeSortCell\" : \"inactiveSortCell\",\r\n              }}\r\n              active={getHeaderSortInfo(header.key)?.key === header.key}\r\n              direction={getHeaderSortInfo(header.key)?.key === header.key ? getHeaderSortInfo(header.key)?.type : \"asc\"}\r\n              onClick={() => sortHandler(header.key)}\r\n            >\r\n              {header.text}\r\n              {getHeaderSortInfo(header.key)?.key === header.key ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {getHeaderSortInfo(header.key)?.type === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n\r\n            </TableSortLabel>\r\n            {getHeaderIndex(header.key) !== undefined && props?.multiSort && getHeaderIndex(header?.key) > 0 ?\r\n              <span className={classes.circleStyle}>\r\n                {getHeaderIndex(header.key)}\r\n              </span>\r\n              : \"\"}\r\n          </div>\r\n        </TableCell>\r\n      );\r\n    });\r\n\r\n    const checkbox = () => {\r\n      return (\r\n        <TableCell className={classes.width_1}>\r\n          <Checkbox\r\n            onChange={(event) => handleSelectAllClick(event)}\r\n            inputProps={{\r\n              \"aria-label\": \"Select all table items.\",\r\n            }}\r\n          ></Checkbox>\r\n        </TableCell>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <TableRow className={styleHeader.header}>\r\n        {props?.checkbox === undefined || props?.checkbox === false\r\n          ? undefined\r\n          : checkbox()}\r\n        {tableHeaders}\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  const getTotalItemsCount = () => {\r\n    let finalCount = 0;\r\n    pages.forEach((item) => {\r\n      finalCount += item.length;\r\n    });\r\n    return finalCount;\r\n  };\r\n\r\n  const updatePages = (tableItems: any[]) => {\r\n    const updatedPages = paginate(tableItems, rowsPerPage);\r\n    pages = updatedPages !== undefined ? updatedPages : [];\r\n  };\r\n\r\n  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  const createRows = () => {\r\n    let tableRows: any[] = [];\r\n    const sortOrderKey = orderBy;\r\n    const sortOrder = order;\r\n    const headers = props.headers;\r\n    const tableCellStyle =\r\n      props.customStyle?.bodyCell === undefined\r\n        ? \"\"\r\n        : props.customStyle.bodyCell;\r\n\r\n    // TODO: Add Multi Sort Feature\r\n    const tableItems: any[] = sort(\r\n      filter(dataItemsGlobal, chips),\r\n      sortOrder,\r\n      sortOrderKey\r\n    );\r\n    updatePages(tableItems);\r\n    tableItemsCount = getTotalItemsCount();\r\n    const colSpan = props.headers.length + (props.checkbox ? 1 : 0);\r\n    console.log(colSpan);\r\n\r\n    if (tableItemsCount > 0) {\r\n      pages[page].forEach((rowItem: any, index: number) => {\r\n        const labelId = `table-checkbox-${index}`;\r\n        const isItemSelected = isSelected(rowItem[props.itemKey]);\r\n        const tableRow = headers.map((header) => {\r\n          return (\r\n            <TableCell\r\n              className={`${tableCellStyle} MuiColumn_${header.key}`}\r\n              variant=\"body\"\r\n              key={`${header.key}_cell${index}`}\r\n              align={header.align}\r\n            >\r\n              {header.cell(rowItem, index)}\r\n            </TableCell>\r\n          );\r\n        });\r\n        const checkboxes = () => {\r\n          return (\r\n            <TableCell className={tableCellStyle}>\r\n              <Checkbox\r\n                checked={isItemSelected}\r\n                inputProps={{\r\n                  \"aria-label\": labelId,\r\n                }}\r\n              ></Checkbox>\r\n            </TableCell>\r\n          );\r\n        };\r\n\r\n        const tableRowItem = () => {\r\n          return (\r\n            <TableRow\r\n              hover\r\n              aria-checked={isItemSelected}\r\n              tabIndex={-1}\r\n              role={props?.checkbox === undefined ? \"table row\" : \"checkbox\"}\r\n              onClick={(event) => handleClick(event, rowItem[props.itemKey])}\r\n              key={`${rowItem[props.itemKey]}`}\r\n            >\r\n              {props?.checkbox === undefined || props?.checkbox === false\r\n                ? undefined\r\n                : checkboxes()}\r\n              {tableRow}\r\n            </TableRow>\r\n          );\r\n        };\r\n        tableRows.push(tableRowItem());\r\n      });\r\n      if (props.emptySpacing) {\r\n        const emptyRows = rowsPerPage - pages[page].length;\r\n\r\n        if (emptyRows > 0 && tableItemsCount !== 0) {\r\n          tableRows.push(\r\n            <TableRow key=\"emptyRow\" style={{ height: emptyRows * 53 }}>\r\n              <TableCell colSpan={colSpan} />\r\n            </TableRow>\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      tableRows.push(\r\n        <TableRow key=\"emptyRow\">\r\n          <TableCell colSpan={colSpan}>No Match Found</TableCell>\r\n        </TableRow>\r\n      );\r\n    }\r\n    dataItemsGlobalFiltered = tableItems;\r\n    let emittedData: any[];\r\n    if (props.checkbox && selected.length > 0) {\r\n      emittedData = [];\r\n      dataItemsGlobalFiltered.forEach((item: any) => {\r\n        selected.forEach((sel: any) => {\r\n          if (item[props.itemKey] === sel) {\r\n            emittedData.push(item);\r\n          }\r\n        });\r\n      });\r\n      dataEmit(emittedData)\r\n    }\r\n\r\n    if (!props.checkbox) {\r\n      dataEmit(dataItemsGlobalFiltered)\r\n    }\r\n    return tableRows;\r\n  };\r\n\r\n  const dataEmit = (data: any[]) => {\r\n    if (typeof props?.emit === \"function\") {\r\n      props.emit(data)\r\n    }\r\n  }\r\n\r\n  const renderTable = () => {\r\n    return (\r\n      <TableContainer>\r\n        <Table>\r\n          <TableHead>{createHeader()}</TableHead>\r\n          <TableBody>{createRows()}</TableBody>\r\n        </Table>\r\n        <TablePagination\r\n          rowsPerPageOptions={rowsPerPageOptions}\r\n          component=\"div\"\r\n          count={tableItemsCount}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={(event, number) => handleChangePage(event, number)}\r\n          onChangeRowsPerPage={(event) => handleChangeRowsPerPage(event)}\r\n        />\r\n      </TableContainer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <StylesProvider generateClassName={generateClassName}>\r\n      {filterRender()}\r\n      {renderTable()}\r\n    </StylesProvider>\r\n  );\r\n}\r\n\r\n/**\r\n * Returns an array of arrays which has items segmented based on rowsPerPage\r\n * @param tableRows Rows of items\r\n * @param rowsPerPage rows per page to show\r\n */\r\nfunction paginate(tableRows: any[], rowsPerPage: number): any[] {\r\n  let paginatedRows = tableRows;\r\n  const pages: any[] = [];\r\n  if (tableRows.length > 0) {\r\n    let pagesCount = Math.ceil(tableRows.length / rowsPerPage);\r\n    for (let index = 0; index < pagesCount; index++) {\r\n      const start = index * rowsPerPage;\r\n      const end = (index + 1) * rowsPerPage;\r\n      const paginateSlice = paginatedRows.slice(start, end);\r\n      pages.push(paginateSlice);\r\n    }\r\n  }\r\n  return pages;\r\n}\r\n\r\n/**\r\n * Function to sort data based on order and key passed.\r\n * @param order Whether the order is 'asc' or 'desc'\r\n * @param key The key to sort by\r\n */\r\nfunction dynamicSort(order: Order, key: string | undefined) {\r\n\r\n  if (key !== undefined) {\r\n    return function (a: any, b: any) {\r\n      if (order === \"desc\") {\r\n        return typeof a[key] === \"number\"\r\n          ? b[key] - a[key]\r\n          : b[key]\r\n            ?.toString()\r\n            ?.toUpperCase()\r\n            ?.localeCompare(a[key]?.toUpperCase());\r\n      } else {\r\n        return typeof a[key] === \"number\"\r\n          ? a[key] - b[key]\r\n          : a[key]?.toUpperCase()?.localeCompare(b[key]?.toUpperCase());\r\n      }\r\n    };\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * cleans the term for use\r\n * @param term string to clean\r\n */\r\nfunction sanitize(term: string) {\r\n  return term.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n}\r\n\r\n/**\r\n * Sorts the data items based on the key and order (asc/desc)\r\n * @param dataItems Data items to sort\r\n * @param order Order of the items to be sorted to either arc or desc\r\n * @param key string to sort by\r\n */\r\nfunction sort(dataItems: any[], order: Order, key: string | undefined) {\r\n\r\n  if (dataItems !== undefined) {\r\n    return dataItems.sort(dynamicSort(order, key));\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * returns an array of items which match the filterTerms within dataItems.\r\n * @param dataItems Data items to filter from\r\n * @param filterTerms terms to filter\r\n */\r\nfunction filter(dataItems: any, filterTerms: ChipData[]) {\r\n\r\n  let inputData = dataItems;\r\n  if (dataItems !== undefined && dataItems.length !== 0) {\r\n    const keys = Object.keys(inputData[0]);\r\n    if (filterTerms.length > 0) {\r\n      filterTerms.forEach((term) => {\r\n        const filteredData: any = [];\r\n        let keyTerm = \"\";\r\n        keys.map((key) =>\r\n          inputData.forEach((data: any) => {\r\n            keyTerm =\r\n              typeof data[key] === \"number\"\r\n                ? data[key].toString()\r\n                : data[key].toLowerCase();\r\n            if (keyTerm.toLowerCase().includes(term.label.toLowerCase())) {\r\n              filteredData.push(data);\r\n            }\r\n          })\r\n        );\r\n        inputData = filteredData;\r\n      });\r\n    }\r\n    return inputData;\r\n  }\r\n  return [];\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components';\r\nimport { WindowClose } from \"@styled-icons/boxicons-regular/WindowClose\";\r\nimport ReactDOM from 'react-dom';\r\n\r\ninterface DialogProps {\r\n  id: string;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  title?: string\r\n  class?: string\r\n  children?: any;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 700;\r\n  width: inherit;\r\n  outline: 0;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background: rgba(0, 0, 0, 0.3);\r\n  z-index: 500;\r\n`;\r\n\r\ntype StyledModalProps = {\r\n  fadeType: string;\r\n  width: number;\r\n  height: number | string;\r\n}\r\n\r\nconst StyledModal = styled.div<StyledModalProps>`\r\n  z-index: 100;\r\n  background: white;\r\n  position: relative;\r\n  margin: auto;\r\n  border-radius: 8px;\r\n  width: ${(props: StyledModalProps) => props.width}px;\r\n  height: ${(props: StyledModalProps) => props.height || 'fit-content'};\r\n  opacity: ${(props: StyledModalProps) => {\r\n    switch (props.fadeType) {\r\n      case \"in\":\r\n        return \"1\";\r\n      default:\r\n        return \"0\";\r\n    };\r\n  }};\r\n  transition: ${(props: StyledModalProps) => {\r\n    switch (props.fadeType) {\r\n      case \"in\":\r\n        return `opacity linear 0.25s;`;\r\n      case \"out\":\r\n        return `opacity linear 0.25s;`;\r\n      default:\r\n        return \"\";\r\n    }\r\n  }};\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 8px 8px 0 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0.3rem;\r\n`;\r\n\r\nconst HeaderText = styled.div`\r\n    padding:15px;\r\n    font-weight:500;\r\n    font-size:20px;\r\n    color: #000000;\r\n    align-self: center;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  font-size: 0.8rem;\r\n  border: none;\r\n  border-radius: 3px;\r\n  width:40px;\r\n  margin-left: 0.5rem;\r\n  background: none;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Content = styled.div`\r\n  padding: 10px;\r\n  max-height: 30rem;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  \r\n`;\r\n\r\nexport function DialogBox(props: DialogProps) {\r\n\r\n  const [fade, setFade] = useState({ fadeType: '' })\r\n\r\n  const transitionEnd = (e: any) => {\r\n    if (e.propertyName !== \"opacity\" || fade.fadeType === \"in\") {\r\n      return;\r\n    }\r\n    if (fade.fadeType === \"out\") {\r\n      props.onClose();\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (props.open) {\r\n      window.addEventListener(\"keydown\", onEscKeyDown, false);\r\n      setTimeout(() => {\r\n        setFade({ fadeType: \"in\" })\r\n      }, 0);\r\n    }\r\n    if (!props.open) {\r\n      setTimeout(() => {\r\n        setFade({ fadeType: \"out\" })\r\n      }, 0);\r\n    }\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", onEscKeyDown, false);\r\n\r\n    }\r\n  }, [props])\r\n\r\n\r\n  const onEscKeyDown = (e: any) => {\r\n    if (e.key !== \"Escape\") { return }\r\n    else {\r\n      setFade({ fadeType: \"out\" })\r\n    }\r\n  }\r\n\r\n  const handleClick = (e: any) => {\r\n    e.preventDefault();\r\n    setFade({ fadeType: \"out\" })\r\n  }\r\n\r\n  const render = () => {\r\n    return (\r\n      <React.Fragment >\r\n        <Backdrop />\r\n        <Wrapper>\r\n          <StyledModal\r\n            role=\"dialog\"\r\n            id={props.id}\r\n            className={props.class}\r\n            onTransitionEnd={transitionEnd}\r\n            fadeType={fade.fadeType}\r\n            width={!!props.width ? props.width : 800}\r\n            height={!!props.height ? props.height : 400}\r\n          >\r\n            <Header>\r\n              <HeaderText>{props.title || \"Dialog\"}</HeaderText>\r\n              <CloseButton onClick={handleClick}>\r\n                <WindowClose />\r\n              </CloseButton>\r\n            </Header>\r\n            <Content>\r\n              {props.children}\r\n            </Content>\r\n          </StyledModal>\r\n        </Wrapper>\r\n      </React.Fragment >\r\n    )\r\n  }\r\n\r\n\r\n  return props.open ? ReactDOM.createPortal(render(), document.body) : null;\r\n}","import styled from \"styled-components\";\r\nimport { BaseButton } from \"../Button/BaseButton\";\r\n\r\nexport const fontStyle = `'Segoe UI', Tahoma, Geneva, Verdana, sans-serif`\r\n\r\nexport const ToolbarButton = styled(BaseButton)`\r\nbackground-color:'gray';\r\nheight:40px;\r\nmin-width:40px;\r\nmargin-right:3px;\r\nmargin-bottom:3px;\r\nborder-color:#E0E0E0;\r\nbackground-color:#E0E0E0;\r\nmargin-right:5px;\r\nborder-radius:5px;\r\n&:hover{\r\n    background-color:lightgray\r\n}\r\n&:focus{\r\n    border:2px solid darkgray;\r\n    background-color:lightgray;\r\n    outline:none\r\n}\r\n`;\r\n\r\n\r\nexport const CloseButton = styled(BaseButton)`\r\n    background-color:#bf0000;\r\n    color:white;\r\n    &:hover{\r\n        background-color:#9d0000;\r\n    }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    font-size:1.3em;\r\n    font-family: ${fontStyle};\r\n    padding:3px;\r\n    min-width:80px;\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n    padding:10px;\r\n    width:75%;\r\n    border:2px solid lightgray;\r\n    border-radius:3px;\r\n    &:focus{\r\n        border:2px solid #63a4ff;\r\n    }\r\n`;\r\n\r\ntype RowProps = {\r\n    flex?: string | number;\r\n    gap?: number;\r\n    maxHeight?: string;\r\n    minHeight?: string;\r\n    justifyContent?: string;\r\n    alignItems?: string;\r\n    padding?: string | number;\r\n\r\n}\r\n\r\nexport const Row = styled.div<RowProps>`\r\n    display:flex;\r\n    flex-direction:row;\r\n    flex-wrap:wrap;\r\n    justify-content:${(props: any) => props.justifyContent || 'normal'};\r\n    align-items:${(props: any) => props.alignItems || 'normal'};\r\n    width:100%;\r\n    gap:${(props: any) => props.gap || 0}px;\r\n    flex:${(props: any) => props.flex || 0};\r\n    max-height:${(props: any) => props.maxHeight || 'fit-content'};\r\n    min-height:${(props: any) => props.minHeight || 'fit-content'};\r\n    padding:${(props: any) => typeof props.padding === 'number' ? props.padding + 'px' : props.padding || 0};\r\n`;\r\n\r\nexport const ErrorMessage = styled.span`\r\n    color:#bf0000;\r\n    font-family:${fontStyle};\r\n    font-size:14px;\r\n`;\r\n\r\ntype ColumnProps = {\r\n    width?: string;\r\n    color?: string;\r\n    flex?: string | number;\r\n    maxHeight?: string;\r\n}\r\n\r\nexport const Column = styled.div<ColumnProps>`\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:stretch;\r\n    justify-content:flex-start;\r\n    background-color:${(props: any) => props.color};\r\n    flex:${(props: any) => props.flex || 0};\r\n    min-width:${(props: any) => props.width || 'auto'};\r\n    max-height:${(props: any) => props.maxHeight || 'fit-content'};\r\n`;\r\n\r\ntype StyledTextareaProps = {\r\n    maxHeight?: string;\r\n}\r\n\r\nexport const StyledTextarea = styled.textarea<StyledTextareaProps>`\r\n    display: flex;\r\n    font-size: 1.125em;\r\n    font-family: ${fontStyle};\r\n    color: inherit;\r\n    position: relative;\r\n    display: flex;\r\n    max-width:calc(100% - 28px);\r\n    width:95%;\r\n    min-width:calc(100% - 28px);\r\n    flex: 1;\r\n    align-items: stretch;\r\n    overflow: auto;\r\n    margin-top: -1px;\r\n    max-height:${(props: any) => props.maxHeight || \"fit-content\"};\r\n    background-color: hsl(0, 0%, 97.5%);\r\n    border: 1px solid hsl(214, 13%, 90%);\r\n    padding: calc(0.5 * (1em + 1ex));\r\n    border-radius: 3px;\r\n`;\r\n\r\ntype MainContainerProps = {\r\n    minHeight?: string;\r\n}\r\n\r\nexport const MainContainer = styled.div<MainContainerProps>`\r\n    min-height: ${(props: any) => props.minHeight || \"100%\"};\r\n    flex:1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display:flex;\r\n    align-items:stretch;\r\n    justify-content:flex-start;\r\n    position: fixed;\r\n\r\n`;\r\n\r\ntype MarkdownBodyProps = {\r\n    maxHeight?: string;\r\n    overflowY: string;\r\n}\r\nexport const MarkdownBody = styled.div<MarkdownBodyProps>`\r\n    -ms-text-size-adjust: 100%;\r\n    -webkit-text-size-adjust: 100%;\r\n    font-family:${fontStyle};\r\n    font-size: 1.125em;\r\n    word-wrap: break-word;\r\n    width:auto;\r\n    overflow-y:${(props: any) => props.overflowY};\r\n    max-height:${(props: any) => props.maxHeight || 'fit-content'};\r\n    flex:1;\r\n    &:before{\r\n        content: \"\";\r\n        display: table;\r\n    }\r\n    &:after{\r\n        clear: both;\r\n        content: \"\";\r\n        display: table;\r\n    }\r\n    padding-left:10px;\r\n`;\r\n\r\n\r\nexport const ToolbarRow = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content:start;\r\n    align-items:center;\r\n    flex-wrap:wrap;\r\n    background-color:#1e272c;\r\n    padding:5px 0 5px 5px;\r\n    border-top-left-radius:3px;\r\n    max-width:100%;\r\n    min-width:50%;\r\n    position: relative;\r\n\r\n    border-top-right-radius:3px;\r\n`;\r\n\r\ntype PreviewTitleProps = {\r\n    padding?: string;\r\n}\r\nexport const PreviewTitle = styled.div<PreviewTitleProps>`\r\n    display:flex;\r\n    font-family:${fontStyle};\r\n    font-size:21px;\r\n    padding:${(props: any) => props.padding || '0'};\r\n    align-items:center;\r\n    justify-content:center;\r\n    \r\n`;\r\n\r\ntype BorderedProps = {\r\n    bordered: boolean;\r\n    maxHeight: string;\r\n}\r\n\r\nexport const Bordered = styled.div<BorderedProps>`\r\n    /* display:flex; */\r\n    border: ${(props: any) => props.bordered ? '2px solid lightgray' : 'none'};\r\n    max-height:${(props: any) => props.maxHeight || \"fit-content\"};\r\n    display:flex;\r\n    flex-direction:column;\r\n    flex:1;\r\n\r\n`;\r\n\r\n\r\nexport const RedSup = styled.sup`\r\n    color: red;\r\n`;","import React, { useEffect, useRef, useState } from 'react'\r\nimport { RemarkAbbr } from \"remark-abbr\";\r\nimport { RemarkUnderline } from \"remark-underline\";\r\n// Markdown imports\r\n// ---------------------------------\r\nimport rehype2react from 'rehype-react';\r\nimport unified from 'unified';\r\nimport remark2rehype from 'remark-rehype';\r\nimport markdown from \"remark-parse\";\r\nimport rehypeSanitize from 'rehype-sanitize';\r\nimport rehypeRaw from 'rehype-raw';\r\nimport { Bordered, Column, MarkdownBody, PreviewTitle } from '../../Styles/CommonStyles';\r\nlet rehypePicture = require(\"rehype-picture\");\r\nlet rehypeUrls = require(\"rehype-urls\");\r\nlet slug = require('remark-slug');\r\nlet toc = require('remark-toc');\r\nlet rehypeHighlight = require('rehype-highlight');\r\nlet remarkGfm = require(\"remark-gfm\")\r\nlet remarkHeading = require('remark-heading-id')\r\nlet remarkMidas = require('remark-midas');\r\n\r\ninterface MarkdownPreviewAreaProps {\r\n    content: string;\r\n    maxHeight?: string;\r\n    previewRefCallback?: any;\r\n    editable: boolean;\r\n    borderedPreview?: boolean;\r\n    id?: string;\r\n}\r\n\r\nexport function MarkdownPreviewArea(props: MarkdownPreviewAreaProps) {\r\n\r\n    const [content, setContent] = useState(props.content)\r\n    const previewRef = useRef<HTMLDivElement>(null)\r\n    useEffect(() => {\r\n        setContent(props.content);\r\n    }, [props])\r\n\r\n    const processor = (_content: any): any => {\r\n        let markdown_processor = null;\r\n        try {\r\n            let unifiedResult = unified()\r\n                .use(markdown)\r\n                .use(remarkMidas)\r\n                .use(remarkGfm)\r\n                .use(slug)\r\n                .use(toc)\r\n                .use(remarkHeading)\r\n                .use(RemarkUnderline)\r\n                .use(RemarkAbbr)\r\n                .use(remark2rehype, { allowDangerousHtml: true })\r\n                .use(rehypeRaw)\r\n                .use(rehypeUrls, (url: any, node: any) => {\r\n                    if (url.host !== 'internal.site') {\r\n                        node.properties.target = \"_blank\"\r\n                    }\r\n                })\r\n                .use(rehypePicture)\r\n                .use(rehypeHighlight)\r\n                .use(rehypeSanitize)\r\n                .use(rehype2react, {\r\n                    createElement: React.createElement\r\n                })\r\n                .processSync(_content)\r\n            markdown_processor = unifiedResult.result;\r\n        } catch (error: any) {\r\n            console.error(error.message);\r\n            markdown_processor = (\r\n                <div>\r\n                    Error in markdown.\r\n                    <p>\r\n                        {error.message}\r\n                    </p>\r\n                </div>\r\n            );\r\n        }\r\n        return markdown_processor\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (previewRef !== null && previewRef !== undefined) {\r\n            props.previewRefCallback(previewRef)\r\n        }\r\n    }, [props])\r\n    const render = () => {\r\n        return (\r\n            <Column flex={1} width={\"45%\"}\r\n                id=\"markdownPreviewAreaColumn\"\r\n                maxHeight={props.maxHeight || 'fit-content'}\r\n            >\r\n                <Bordered\r\n                    maxHeight={props.editable ? 'calc(100% - 10px)' : 'fit-content'}\r\n                    // maxHeight={props.maxHeight || \"fit-content\"}\r\n                    bordered={props.borderedPreview !== undefined ? props.borderedPreview : true}\r\n                >\r\n                    {\r\n                        props.editable && <PreviewTitle>\r\n                            <h2>\r\n                                PREVIEW AREA\r\n                            </h2>\r\n                        </PreviewTitle>\r\n                    }\r\n                    <MarkdownBody\r\n                        ref={previewRef}\r\n                        id={props.id !== undefined ? props.id + \"_preview_area\" : \"markdown-preview_area\"}\r\n                        overflowY={props.editable ? 'scroll' : 'hidden'}\r\n                    >\r\n                        {\r\n                            processor(content)\r\n                        }\r\n                    </MarkdownBody>\r\n                </Bordered>\r\n            </Column>\r\n        );\r\n    }\r\n\r\n    return render();\r\n}\r\n\r\n\r\nexport const MemorizedMarkdownPreviewArea = React.memo(MarkdownPreviewArea);","\r\n\r\nexport type TextStyle = \"italic\" | \"bold\" | \"strike\" | \"underline\" | \"sub\" | \"super\"\r\nexport enum TextStyleType {\r\n    bold = 'bold',\r\n    italic = 'italic',\r\n    strike = 'strike',\r\n    underline = 'underline',\r\n    sub = 'sub',\r\n    super = 'super',\r\n}\r\n\r\nexport type Insert = \"oList\" | \"uoList\" | \"img\" | \"table\" | \"link\" | \"abbr\" | \"heading_1\" | \"heading_2\" | \"heading_3\" | \"heading_4\" | \"heading_5\" | \"heading_6\";\r\n\r\nexport enum InsertType {\r\n    orderedList = \"oList\",\r\n    unorderedList = \"uoList\",\r\n    image = \"img\",\r\n    table = \"table\",\r\n    link = \"link\",\r\n    abbreviation = \"abbr\",\r\n\r\n}\r\n\r\nexport enum HeadingType {\r\n    h1 = 'heading_1',\r\n    h2 = 'heading_2',\r\n    h3 = 'heading_3',\r\n    h4 = 'heading_4',\r\n    h5 = 'heading_5',\r\n    h6 = 'heading_6',\r\n\r\n}\r\n\r\n","/**\r\n * Returns an escaped string based on the inputted value.\r\n * @param inputString input string to escape\r\n */\r\nexport const utilEscapeRegExp = (inputString: string) => {\r\n    return inputString.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}","import React, { useEffect, useRef, useState } from 'react'\r\nimport { ChevronDown } from \"@styled-icons/boxicons-regular/ChevronDown\";\r\nimport styled from 'styled-components';\r\nimport \"./Menu.css\";\r\n\r\nimport { BorderedButton } from \"../Button/BorderedButton\";\r\n\r\ninterface MenuProps {\r\n    id: string;\r\n    open: boolean;\r\n    onClick: any;\r\n    title: string;\r\n    leftIcon?: any;\r\n    ariaLabel?: string;\r\n    children?: any;\r\n}\r\n\r\nconst MenuButton = styled.div`\r\n    min-width:60px;\r\n    position: relative;\r\n    width:auto;\r\n`;\r\n\r\nconst MenuDropdownList = styled.div`\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    flex-direction:column;\r\n    position:absolute;\r\n    top:40px;\r\n    width:134px;\r\n    transform:translateX(1%);\r\n    /* padding:1rem; */\r\n    overflow:hidden;\r\n    z-index:999999;\r\n`;\r\n\r\nconst MenuItem = styled.button`\r\n    min-width:130px;\r\n    width:auto;\r\n    min-height:40px;\r\n    padding:2px;\r\n    border:0px;\r\n    &:focus{\r\n        background-color:lightgray;\r\n    }\r\n    &:hover{\r\n        background-color:lightgray;\r\n    }\r\n\r\n`;\r\n\r\nconst Row = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    align-items:center;\r\n    justify-content:center;\r\n`;\r\n\r\nfunction usePrevious(val: any) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = val;\r\n    })\r\n    return ref.current;\r\n}\r\n\r\nexport function Menu(props: MenuProps) {\r\n    const ddButton: any = useRef(null);\r\n    const [isListOpen, setIsListOpen] = useState(props.open)\r\n    useEffect(() => {\r\n        const handleChange = (ev: any) => {\r\n            if (ddButton.current && ddButton.current.contains(ev.target)) {\r\n                setIsListOpen(!isListOpen)\r\n            }\r\n            else {\r\n                setIsListOpen(false)\r\n            }\r\n        }\r\n        window.addEventListener('click', handleChange)\r\n\r\n        return () => {\r\n            window.removeEventListener('click', handleChange);\r\n        };\r\n    }, [isListOpen, props.open])\r\n\r\n    const prevListState = usePrevious(isListOpen);\r\n    let className = 'icon'\r\n\r\n    const render = () => {\r\n        // console.log(\"render...\");\r\n\r\n        if (isListOpen) {\r\n            className += ' angle_up'\r\n        }\r\n        else {\r\n            if (prevListState)\r\n                className += ' angle_down'\r\n        }\r\n        return (\r\n            <MenuButton>\r\n                <BorderedButton\r\n                    ref={ddButton}\r\n                    aria-label={props.ariaLabel ?? `${props.title} Menu.`}\r\n                    onClick={props.onClick}>\r\n                    <Row>\r\n                        <div className=\"dd_rec_list_header\">\r\n                            <span>\r\n                                {props.leftIcon}{props.title ?? \"\"}\r\n                            </span>\r\n                        </div>\r\n                        <ChevronDown className={className} />\r\n                    </Row>\r\n                </BorderedButton>\r\n                {\r\n                    isListOpen && (\r\n                        <MenuDropdownList\r\n                            role=\"list\"\r\n                            className=\"dd_rec_list\"\r\n                        >\r\n                            { props.children}\r\n                        </MenuDropdownList>\r\n                    )\r\n                }\r\n            </MenuButton >\r\n        )\r\n    }\r\n\r\n    return render()\r\n}\r\n\r\ninterface MenuDropdownItemProps {\r\n    id?: any;\r\n    ariaLabel?: string;\r\n    onClick?: any;\r\n    onClose?: any\r\n    children?: any;\r\n}\r\n\r\nexport function MenuDropdownItem(props: MenuDropdownItemProps) {\r\n    return (\r\n        <MenuItem\r\n            aria-label={props.ariaLabel}\r\n            id={props.id}\r\n            className={`dd_rec_list_item `}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.children}\r\n        </MenuItem>\r\n    )\r\n}","\r\nimport React from 'react'\r\nimport { useState } from 'react';\r\nimport { Menu, MenuDropdownItem } from '../../../Menu/Menu';\r\nimport { ButtonProps } from '../../model/ButtonToolbarProps';\r\ninterface ComboButtonProps {\r\n    buttonData: ButtonProps\r\n}\r\n\r\nexport const ComboButton = (props: ComboButtonProps) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const handleClick = () => {\r\n        setIsOpen(!isOpen)\r\n    };\r\n\r\n\r\n    const render = () => {\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    onClick={handleClick}\r\n                    open={isOpen}\r\n                    leftIcon={props.buttonData.icon}\r\n                    id=\"simple-dropdown\"\r\n                    title={\"\"}\r\n                >\r\n                    {props.buttonData.options && props.buttonData.options.map(item => (\r\n                        <MenuDropdownItem\r\n                            ariaLabel={item.ariaLabel}\r\n                            id={item.key}\r\n                            onClick={item.callback}\r\n                            key={item.key}\r\n                        >\r\n                            {item.label}\r\n                        </MenuDropdownItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n    return render();\r\n}\r\n","import React, { useState } from 'react'\r\nimport { BaseButton } from '../../../Button/BaseButton';\r\nimport { ComboInsert } from \"../../model/ComboInsert\";\r\nimport { CloseButton, ErrorMessage, Label, RedSup, Row, StyledInput, ToolbarButton } from '../../../Styles/CommonStyles';\r\nimport { ButtonProps } from '../../model/ButtonToolbarProps';\r\nimport { DialogBox } from '../../../DialogBox/DialogBox';\r\n\r\n\r\ninterface AbbrDialogProps {\r\n    text: string;\r\n    title: string;\r\n}\r\n\r\n\r\n\r\nexport default function AbbrDialog(props: ButtonProps) {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n\r\n    const [errors, setErrors] = useState({\r\n        text: '',\r\n        title: ''\r\n    })\r\n\r\n    const [abbrData, setAbbrData] = useState({\r\n        text: '',\r\n        title: ''\r\n    })\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setTimeout(() => {\r\n            setAbbrData({ text: '', title: '' })\r\n        }, 200);\r\n    }\r\n\r\n    const toggleDialog = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const packageAbbr = (data: AbbrDialogProps): ComboInsert => {\r\n        return {\r\n            topInsert: `*[${data.text}]:${data.title}\\n\\n`,\r\n            textInsert: `${data.text}`\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        validate(abbrData);\r\n        if (abbrData.text.trim() !== \"\" && abbrData.title.trim() !== \"\") {\r\n            props.callback(packageAbbr(abbrData));\r\n            handleClose();\r\n\r\n        }\r\n    }\r\n\r\n    const validate = (values: AbbrDialogProps) => {\r\n        if (values.text === \"\" || values.title === \"\") {\r\n            setErrors({\r\n                text: values.text === \"\" ? \"Text cannot be blank\" : \"\",\r\n                title: values.title === \"\" ? \"Title cannot be blank\" : \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ToolbarButton\r\n                onClick={toggleDialog}\r\n                aria-label={props.ariaLabel}>{props.icon}</ToolbarButton>\r\n            <DialogBox\r\n                id=\"abbr-input-dialog\"\r\n                title=\"Add Abbreviation\"\r\n                open={open}\r\n                onClose={handleClose}\r\n                width={380}\r\n            >\r\n                <form onSubmit={handleSubmit} noValidate>\r\n                    <Row>\r\n                        <Label htmlFor=\"text\">Text<RedSup>*</RedSup></Label>\r\n                        <StyledInput type=\"text\" name=\"text\" id=\"text\" onChange={(e: any) => {\r\n                            setAbbrData({ ...abbrData, text: e.target.value })\r\n                        }} />\r\n                        {errors.text && (\r\n                            <ErrorMessage>\r\n                                {errors.text}\r\n                            </ErrorMessage>\r\n                        )}\r\n                    </Row>\r\n                    <Row>\r\n                        <Label htmlFor=\"title\">Title<RedSup>*</RedSup></Label>\r\n                        <StyledInput type=\"text\" name=\"title\" id=\"title\" onChange={(e: any) => { setAbbrData({ ...abbrData, title: e.target.value }) }} />\r\n                        {errors.title && (\r\n                            <ErrorMessage>\r\n                                {errors.title}\r\n                            </ErrorMessage>\r\n                        )}\r\n                    </Row>\r\n                    <Row\r\n                        padding={5}\r\n                    >\r\n                        <BaseButton\r\n                            type=\"submit\"\r\n                        >\r\n                            Insert Abbreviation\r\n                        </BaseButton>\r\n                        <CloseButton\r\n                            onClick={handleClose}\r\n                        >\r\n                            Close\r\n                        </CloseButton>\r\n                    </Row>\r\n                    <Row>\r\n                        <p><strong>Note</strong>: Fields with <RedSup>*</RedSup> are required.</p>\r\n                    </Row>\r\n                </form>\r\n            </DialogBox>\r\n        </div>\r\n    )\r\n}\r\n","export const isURLValid = (url: string) => {\r\n    // debugger;\r\n    const regex = /^http([s]?):\\/\\/.*/;\r\n    return regex.test(url)\r\n}","import React, { useState } from 'react'\r\nimport { BaseButton } from '../../../Button/BaseButton';\r\nimport { Checkbox } from '../../../Checkbox/Checkbox';\r\nimport { ComboInsert } from \"../../model/ComboInsert\";\r\nimport { isURLValid } from '../../../utils/util-is-url-valid';\r\nimport { CloseButton, ErrorMessage, Label, RedSup, Row, StyledInput, ToolbarButton } from '../../../Styles/CommonStyles';\r\nimport { ButtonProps } from '../../model/ButtonToolbarProps';\r\nimport { DialogBox } from '../../../DialogBox/DialogBox';\r\n\r\n\r\ninterface UrlDialogProps {\r\n    text: string;\r\n    url: string;\r\n    title: string;\r\n    global: boolean\r\n}\r\n\r\nexport default function LinkDialog(props: ButtonProps) {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [urlValidateError, setUrlValidateError] = useState(false);\r\n\r\n    const [errors, setErrors] = useState({\r\n        text: '',\r\n        url: '',\r\n\r\n    })\r\n\r\n    const [linkData, setLinkData] = useState<UrlDialogProps>({\r\n        text: '',\r\n        title: '',\r\n        url: '',\r\n        global: false\r\n    })\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setTimeout(() => {\r\n            setLinkData({ text: '', title: '', url: '', global: false })\r\n        }, 200);\r\n    }\r\n\r\n    const toggleDialog = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const packageLink = (data: UrlDialogProps): ComboInsert => {\r\n        const topInsert = data.global ? `[${data.text}]:${data.url} \"${data.title}\"\\n\\n` : ''\r\n        const textInsert = data.global ? `[${data.text}]` : `[${data.text}](${data.url} \"${data.title}\")`\r\n        return {\r\n            topInsert: topInsert,\r\n            textInsert: textInsert\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        validate(linkData);\r\n        if (linkData.text.trim() !== \"\" && linkData.url.trim() !== \"\") {\r\n            props.callback(packageLink(linkData));\r\n            handleClose();\r\n\r\n        }\r\n    }\r\n\r\n    const handleCheckboxChange = (e: any) => {\r\n        setLinkData({\r\n            ...linkData,\r\n            global: e.target.checked\r\n        })\r\n    }\r\n\r\n    const validate = (values: UrlDialogProps) => {\r\n        if (values.text === \"\" || values.url === \"\") {\r\n            // console.log(values);\r\n\r\n            setErrors({\r\n                // ...linkData,\r\n                text: values.text === \"\" ? \"Text cannot be blank\" : \"\",\r\n                url: values.url === \"\" ? \"URL cannot be blank\" : \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ToolbarButton\r\n                onClick={toggleDialog}\r\n                aria-label={props.ariaLabel}>{props.icon}</ToolbarButton>\r\n            <DialogBox\r\n                id=\"link-input-dialog\"\r\n                title=\"Add Link\"\r\n                open={open}\r\n                onClose={handleClose}\r\n                width={380}\r\n            >\r\n                <form onSubmit={handleSubmit} noValidate>\r\n                    <Row>\r\n                        <Label htmlFor=\"text\">Text<RedSup>*</RedSup></Label>\r\n                        <StyledInput type=\"text\" name=\"text\" id=\"text\" onChange={(e: any) => {\r\n                            setLinkData({ ...linkData, text: e.target.value })\r\n                        }} />\r\n                        {errors.text && (\r\n                            <ErrorMessage>\r\n                                {errors.text}\r\n                            </ErrorMessage>\r\n                        )}\r\n                    </Row>\r\n                    <Row>\r\n                        <Label htmlFor=\"title\">Title</Label>\r\n                        <StyledInput type=\"text\" name=\"title\" id=\"title\" onChange={(e: any) => {\r\n                            setLinkData({ ...linkData, title: e.target.value })\r\n                        }} />\r\n                    </Row>\r\n                    <Row>\r\n                        <Label htmlFor=\"url\">URL<RedSup>*</RedSup></Label>\r\n                        <StyledInput\r\n                            type=\"text\"\r\n                            name=\"url\"\r\n                            id=\"url\"\r\n                            onChange={(e: any) => {\r\n                                setUrlValidateError(!isURLValid(e.target.value));\r\n                                setLinkData({ ...linkData, url: e.target.value })\r\n                            }} />\r\n                        {errors.url && (\r\n                            <ErrorMessage>\r\n                                {errors.url}\r\n                            </ErrorMessage>\r\n                        )}\r\n                        {urlValidateError &&\r\n                            (\r\n                                <ErrorMessage>\r\n                                    URL is not valid\r\n                                </ErrorMessage>\r\n                            )}\r\n                    </Row>\r\n                    <Row\r\n                        justifyContent={\"flex-start\"}\r\n                        alignItems={\"center\"}\r\n                    >\r\n                        <Label>Is globally available?</Label>\r\n                        <Checkbox\r\n                            id=\"global-link\"\r\n                            name=\"global-link\"\r\n                            checked={linkData.global}\r\n                            onChange={handleCheckboxChange}\r\n                        />\r\n                    </Row>\r\n                    <Row\r\n                        justifyContent={\"flex-start\"}\r\n                        alignItems={\"start\"}\r\n                        padding={5}\r\n                    >\r\n                        <BaseButton\r\n                            type=\"submit\"\r\n                        >\r\n                            Insert Link\r\n                        </BaseButton>\r\n                        <CloseButton\r\n                            onClick={handleClose}\r\n                        >\r\n                            Close\r\n                        </CloseButton>\r\n                    </Row>\r\n                    <Row>\r\n                        <p><strong>Note</strong>: Fields with <RedSup>*</RedSup> are required.</p>\r\n                    </Row>\r\n                </form>\r\n            </DialogBox>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { BaseButton } from '../../../Button/BaseButton';\r\nimport { ComboInsert } from \"../../model/ComboInsert\";\r\nimport { isURLValid } from '../../../utils/util-is-url-valid';\r\nimport { CloseButton, ErrorMessage, Label, RedSup, Row, StyledInput, ToolbarButton } from '../../../Styles/CommonStyles';\r\nimport { ButtonProps } from '../../model/ButtonToolbarProps';\r\nimport { DialogBox } from '../../../DialogBox/DialogBox';\r\n\r\n\r\ninterface ImageDialogProps {\r\n    text?: string;\r\n    url: string;\r\n    title?: string;\r\n    width?: string;\r\n    height?: string;\r\n}\r\n\r\nexport default function ImageDialog(props: ButtonProps) {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [urlError, setUrlError] = useState(false);\r\n\r\n\r\n    const [errors, setErrors] = useState({\r\n        url: '',\r\n\r\n    })\r\n\r\n    const [linkData, setLinkData] = useState({\r\n        text: '',\r\n        title: '',\r\n        url: '',\r\n        width: '',\r\n        height: '',\r\n    })\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setTimeout(() => {\r\n            setLinkData({ text: '', title: '', url: '', width: '', height: '' })\r\n        }, 200);\r\n    }\r\n\r\n    const toggleDialog = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const packageImage = (data: ImageDialogProps): ComboInsert => {\r\n\r\n        return {\r\n            topInsert: '',\r\n            textInsert: data.height !== \"\" || data.width !== \"\" ? `<img title=\"${data.title}\" alt=\"${data.text?.replace(/\\s/gi, '_')}\" src=\"${data.url}\" width=\"${data.width}\" height=\"${data.height}\" />` : `![${data.text?.replace(/\\s/gi, '_')}](${data.url} \"${data.title}\")`\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        validate(linkData);\r\n        if (linkData.text.trim() !== \"\" && linkData.url.trim() !== \"\") {\r\n            props.callback(packageImage(linkData));\r\n            handleClose();\r\n\r\n        }\r\n    }\r\n\r\n    const validate = (values: ImageDialogProps) => {\r\n        if (values.text === \"\" || values.url === \"\") {\r\n            setErrors({\r\n                url: values.url === \"\" ? \"URL cannot be blank\" : \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ToolbarButton\r\n                onClick={toggleDialog}\r\n                aria-label={props.ariaLabel}>{props.icon}</ToolbarButton>\r\n            <DialogBox\r\n                id=\"image-input-dialog\"\r\n                title=\"Add Image\"\r\n                open={open}\r\n                onClose={handleClose}\r\n                width={280}\r\n            >\r\n                <form onSubmit={handleSubmit} noValidate>\r\n                    <Row>\r\n                        <Label htmlFor=\"text\">Text<RedSup>*</RedSup></Label>\r\n                        <StyledInput type=\"text\" name=\"text\" id=\"text\" onChange={(e: any) => {\r\n                            setLinkData({ ...linkData, text: e.target.value })\r\n                        }} />\r\n                    </Row>\r\n                    <Row>\r\n                        <Label htmlFor=\"title\">Title</Label>\r\n                        <StyledInput type=\"text\" name=\"title\" id=\"title\" onChange={(e: any) => {\r\n                            setLinkData({ ...linkData, title: e.target.value })\r\n                        }} />\r\n                    </Row>\r\n                    <Row>\r\n                        <Label htmlFor=\"url\">URL<RedSup>*</RedSup></Label>\r\n                        <StyledInput type=\"text\" name=\"url\" id=\"url\" onChange={(e: any) => {\r\n                            setUrlError(!isURLValid(e.target.value));\r\n                            setLinkData({ ...linkData, url: e.target.value })\r\n                        }} />\r\n                        {errors.url && (\r\n                            <ErrorMessage>\r\n                                {errors.url}\r\n                            </ErrorMessage>\r\n                        )}\r\n                        {urlError &&\r\n                            (\r\n                                <ErrorMessage>\r\n                                    URL is not valid\r\n                                </ErrorMessage>\r\n                            )}\r\n                    </Row>\r\n                    <Row>\r\n                        <Label htmlFor='width'>Width</Label>\r\n                        <StyledInput\r\n                            type=\"text\"\r\n                            name=\"width\"\r\n                            id=\"width\"\r\n                            value={linkData.width}\r\n                            onChange={(e: any) => {\r\n                                setLinkData({\r\n                                    ...linkData,\r\n                                    width: e.target.value\r\n                                })\r\n                            }}\r\n                        />\r\n                        <Label htmlFor='height'>Height</Label>\r\n                    </Row>\r\n                    <Row>\r\n                        <StyledInput\r\n                            type=\"text\"\r\n                            value={linkData.height}\r\n                            name=\"height\"\r\n                            id=\"height\"\r\n                            onChange={(e: any) => {\r\n                                setLinkData({\r\n                                    ...linkData,\r\n                                    height: e.target.value\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Row>\r\n                    <Row\r\n                        padding={5}\r\n                    >\r\n                        <BaseButton\r\n                            type=\"submit\"\r\n                        >\r\n                            Insert Image\r\n                        </BaseButton>\r\n                        <CloseButton\r\n                            onClick={handleClose}\r\n                        >\r\n                            Close\r\n                        </CloseButton>\r\n                    </Row>\r\n                    <Row>\r\n                        <p><strong>Note</strong>: Fields with <RedSup>*</RedSup> are required.</p>\r\n                    </Row>\r\n                </form>\r\n            </DialogBox>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Heading } from \"@styled-icons/boxicons-regular/Heading\";\r\nimport { Bold } from \"@styled-icons/boxicons-regular/Bold\";\r\nimport { Italic } from \"@styled-icons/boxicons-regular/Italic\";\r\nimport { Underline } from \"@styled-icons/boxicons-regular/Underline\";\r\nimport { Strikethrough } from \"@styled-icons/boxicons-regular/Strikethrough\";\r\nimport { Superscript } from \"@styled-icons/material/Superscript\";\r\nimport { Subscript } from \"@styled-icons/material/Subscript\";\r\nimport { ListUl } from \"@styled-icons/boxicons-regular/ListUl\";\r\nimport { ListOl } from \"@styled-icons/boxicons-regular/ListOl\";\r\nimport { Link } from \"@styled-icons/boxicons-regular/Link\";\r\nimport { Table } from \"@styled-icons/boxicons-regular/Table\";\r\nimport { Image } from \"@styled-icons/boxicons-regular/Image\";\r\nimport \"./ButtonToolbar.css\";\r\nimport { utilWrapper } from '../../utils/util-wrapper';\r\nimport { utilGetSideChars } from '../../utils';\r\nimport { TextStyleType, Insert, TextStyle, InsertType, HeadingType } from \"../model/Types\";\r\nimport { ComboInsert } from \"../model/ComboInsert\";\r\nimport { ButtonProps, ButtonToolbarProps } from \"../model/ButtonToolbarProps\";\r\nimport { ComboButton } from './ComboButton/ComboButton';\r\nimport { ToolbarButton, ToolbarRow } from '../../Styles/CommonStyles';\r\nimport AbbrDialog from './AbbrDialog/AbbrDialog';\r\nimport LinkDialog from './LinkDialog/LinkDialog';\r\nimport ImageDialog from './ImageDialog/ImageDialog';\r\n\r\nexport function ButtonsToolbar(props: ButtonToolbarProps) {\r\n\r\n    const buttonsArray: ButtonProps[] = [\r\n        {\r\n            icon: <Heading />,\r\n            label: \"Heading\",\r\n            ariaLabel: \"Heading for current line.\",\r\n            tooltip: \"Add Heading\",\r\n            key: \"heading\",\r\n            options: [\r\n                {\r\n                    label: 'Heading 1',\r\n                    ariaLabel: 'Heading 1 insert',\r\n                    tooltip: \"Add heading 1\",\r\n                    key: 'heading_1',\r\n                    callback: () => toolbarActions._onInsertText(HeadingType.h1)\r\n                },\r\n                {\r\n                    label: 'Heading 2',\r\n                    ariaLabel: 'Heading 2 insert',\r\n                    tooltip: \"Add heading 2\",\r\n                    key: 'heading_2',\r\n                    callback: () => toolbarActions._onInsertText(HeadingType.h2)\r\n                }, {\r\n                    label: 'Heading 3',\r\n                    ariaLabel: 'Heading 3 insert',\r\n                    tooltip: \"Add heading 3\",\r\n                    key: 'heading_3',\r\n                    callback: () => toolbarActions._onInsertText(HeadingType.h3)\r\n                }, {\r\n                    label: 'Heading 4',\r\n                    ariaLabel: 'Heading 4 insert',\r\n                    tooltip: \"Add heading 4\",\r\n                    key: 'heading_4',\r\n                    callback: () => toolbarActions._onInsertText(HeadingType.h4)\r\n                }, {\r\n                    label: 'Heading 5',\r\n                    ariaLabel: 'Heading 5 insert',\r\n                    tooltip: \"Add heading 5\",\r\n                    key: 'heading_5',\r\n                    callback: () => toolbarActions._onInsertText(HeadingType.h5)\r\n                }, {\r\n                    label: 'Heading 6',\r\n                    ariaLabel: 'Heading 6 insert',\r\n                    tooltip: \"Add heading 6\",\r\n                    key: 'heading_6',\r\n                    callback: () => toolbarActions._onInsertText(HeadingType.h6)\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            icon: <Bold />,\r\n            ariaLabel: \"Bold selected text.\",\r\n            tooltip: \"Bold\",\r\n            key: \"bold\",\r\n            callback: () => toolbarActions._onTextFormatClick(TextStyleType.bold)\r\n        },\r\n        {\r\n            icon: <Italic />,\r\n            ariaLabel: \"Italicize selected text.\",\r\n            tooltip: \"Italic\",\r\n            key: \"italic\",\r\n            callback: () => toolbarActions._onTextFormatClick(TextStyleType.italic)\r\n        },\r\n        {\r\n            icon: <Underline />,\r\n            ariaLabel: \"Underline selected text.\",\r\n            tooltip: \"Underline\",\r\n            key: \"underline\",\r\n            disabled: false,\r\n            callback: () => toolbarActions._onTextFormatClick(TextStyleType.underline)\r\n        },\r\n        {\r\n            icon: <Strikethrough />,\r\n            ariaLabel: \"Strike through selected text.\",\r\n            tooltip: \"Strike through\",\r\n            key: \"strikethrough\",\r\n            callback: () => toolbarActions._onTextFormatClick(TextStyleType.strike)\r\n        },\r\n        {\r\n            icon: <Superscript />,\r\n            ariaLabel: \"Turn selected text into super script.\",\r\n            tooltip: \"Super Script\",\r\n            key: \"superScript\",\r\n            callback: () => toolbarActions._onTextFormatClick(TextStyleType.super)\r\n        },\r\n        {\r\n            icon: <Subscript />,\r\n            ariaLabel: \"Turn selected text into sub script.\",\r\n            tooltip: \"Sub Script\",\r\n            key: \"subScript\",\r\n            callback: () => toolbarActions._onTextFormatClick(TextStyleType.sub)\r\n        },\r\n        {\r\n            icon: <ListUl />,\r\n            ariaLabel: \"Add new unordered list.\",\r\n            tooltip: \"Unordered List\",\r\n            key: \"unorderedList\",\r\n            callback: () => toolbarActions._onInsertText(InsertType.unorderedList)\r\n        },\r\n        {\r\n            icon: <ListOl />,\r\n            ariaLabel: \"Add new ordered list.\",\r\n            tooltip: \"Ordered List\",\r\n            key: \"orderedList\",\r\n            callback: () => toolbarActions._onInsertText(InsertType.orderedList)\r\n        },\r\n        // {\r\n        //     icon: <div><FontColor /><ColorRect theme={{ main: fontColor }} /></div>,\r\n        //     ariaLabel: \"Change selected font color.\",\r\n        //     tooltip: \"Font Color\",\r\n        //     disabled: true,\r\n        //     key: \"fontColor\"\r\n        // },\r\n        // {\r\n        //     icon: <div><Highlight /><ColorRect theme={{ main: highlight }} /></div>,\r\n        //     ariaLabel: \"Highlight selected text.\",\r\n        //     tooltip: \"Highlight\",\r\n        //     disabled: true,\r\n        //     key: \"highlight\"\r\n        // },\r\n\r\n        {\r\n            icon: <Table />,\r\n            ariaLabel: \"Insert table button.\",\r\n            tooltip: \"Add Table\",\r\n            key: \"table\",\r\n            callback: () => toolbarActions._onInsertText(InsertType.table)\r\n        }\r\n    ]\r\n\r\n    const dialogButtons: any = {\r\n        image: {\r\n            icon: <Image />,\r\n            ariaLabel: \"Insert image button.\",\r\n            tooltip: \"Add Image\",\r\n            key: \"image\",\r\n            callback: (e: any) => toolbarActions._onInsertText(InsertType.image, e)\r\n        },\r\n        link: {\r\n            icon: <Link />,\r\n            ariaLabel: \"Insert link button\",\r\n            tooltip: \"Insert Link\",\r\n            key: \"link\",\r\n            callback: (e: any) => toolbarActions._onInsertText(InsertType.link, e)\r\n        },\r\n        abbr: {\r\n            icon: <strong>abbr</strong>,\r\n            ariaLabel: \"Insert abbreviation button\",\r\n            tooltip: \"Insert Abbreviation\",\r\n            key: \"abbr\",\r\n            callback: (e: any) => toolbarActions._onInsertText(InsertType.abbreviation, e)\r\n        }\r\n    }\r\n\r\n    const toolbarActions = {\r\n        _onInsertText(type: Insert, incomingData?: ComboInsert) {\r\n            let val: string | ComboInsert | undefined = undefined\r\n            switch (type) {\r\n                case \"heading_1\":\r\n                    val = \"# \";\r\n                    break;\r\n                case \"heading_2\":\r\n                    val = \"## \";\r\n                    break;\r\n                case \"heading_3\":\r\n                    val = \"### \";\r\n                    break;\r\n                case \"heading_4\":\r\n                    val = \"#### \";\r\n                    break;\r\n                case \"heading_5\":\r\n                    val = \"##### \";\r\n                    break;\r\n                case \"heading_6\":\r\n                    val = \"###### \";\r\n                    break;\r\n                case \"oList\":\r\n                    val = `1. item 1\\n1. item 2\\n1. item 3\\n`;\r\n                    break;\r\n                case \"uoList\":\r\n                    val = `- item 1\\n- item 2\\n- item 3\\n`;\r\n                    break;\r\n                case \"table\":\r\n                    val = `\\n| Col 1 | Col 2 | Col 3 |\\n|:------|:-----:|------:|\\n| c1 r1 | c2 r1 | c3 r1 |\\n| c1 r2 | c2 r2 | c3 r2 |\\n| c1 r3 | c2 r3 | c3 r3 |`;\r\n\r\n                    break;\r\n                case \"link\":\r\n                    val = {\r\n                        topInsert: incomingData?.topInsert || '',\r\n                        textInsert: incomingData?.textInsert || ''\r\n                    };\r\n                    break;\r\n                case \"abbr\":\r\n                    val = {\r\n                        topInsert: incomingData?.topInsert || '',\r\n                        textInsert: incomingData?.textInsert || ''\r\n                    };\r\n                    break;\r\n                case \"img\":\r\n                    val = {\r\n                        topInsert: incomingData?.topInsert || '',\r\n                        textInsert: incomingData?.textInsert || ''\r\n                    };\r\n                    break;\r\n                default:\r\n                    console.error(\"unknown variable passed.\");\r\n                    break;\r\n            }\r\n\r\n            props.insertCmd(val, type)\r\n\r\n        },\r\n        _onTextFormatClick(type: TextStyle) {\r\n            const regex = new RegExp(/([*_~!<sub|sup>]*)([a-zA-Z0-9 ]+)([*_~!</sub|sup>]*)/, \"gi\");\r\n            let char = \"\";\r\n            let endChar = \"\";\r\n            const sideCheck = (line: string) => utilGetSideChars(line, regex)\r\n            let regexSplit: RegExp;\r\n            switch (type) {\r\n                case \"bold\":\r\n                    char = \"**\";\r\n                    regexSplit = new RegExp(/(\\*+)/, \"gi\")\r\n                    break;\r\n                case \"italic\":\r\n                    char = \"_\";\r\n                    regexSplit = /(-)/\r\n\r\n                    break;\r\n                case \"strike\":\r\n                    char = \"~\";\r\n                    regexSplit = new RegExp(/(~)/, \"gi\")\r\n\r\n                    break;\r\n                case \"underline\":\r\n                    char = \"!!\";\r\n                    regexSplit = new RegExp(/(!!)/, \"gi\")\r\n\r\n                    break;\r\n                case \"sub\":\r\n                    char = \"<sub>\";\r\n                    endChar = \"</sub>\";\r\n                    regexSplit = new RegExp(/(<\\/?sub>)/, \"gi\")\r\n\r\n                    break;\r\n                case \"super\":\r\n                    char = \"<sup>\";\r\n                    endChar = \"</sup>\";\r\n                    regexSplit = new RegExp(/(<\\/?sup>)/, \"gi\")\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (!!props.value) {\r\n                let newLines = props.value.split(/\\n\\n/).map(line => {\r\n                    if (line.trim() === \"\") {\r\n                        return line\r\n                    }\r\n                    else {\r\n                        let side = sideCheck(line)?.split(regexSplit).filter(x => x !== \"\")[0]\r\n                        let check = !!side ? (side === char) : false;\r\n                        const wrapped = utilWrapper(line, !check, char, endChar)\r\n                        return wrapped;\r\n                    }\r\n                })\r\n                props.callback(newLines.join(\"\\n\\n\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    const toolbarComboButton = (btn: ButtonProps) => {\r\n        return <ComboButton buttonData={btn} key={btn.key}></ComboButton>\r\n    }\r\n\r\n    const createToolbarButtons = () => {\r\n        const buttonArr = buttonsArray.map((btn) => {\r\n            return !btn.disabled ? (!!btn.options && btn.options?.length > 0 ?\r\n                toolbarComboButton(btn)\r\n                :\r\n                <ToolbarButton\r\n                    onClick={btn.callback}\r\n                    className=\"ripple\" key={`btn_${btn.key}`} aria-label={btn.ariaLabel}>{btn.icon}</ToolbarButton>) : \"\"\r\n        })\r\n        buttonArr.push(\r\n            <AbbrDialog {...dialogButtons.abbr} ></AbbrDialog>\r\n        );\r\n        buttonArr.push(\r\n            <LinkDialog {...dialogButtons.link} ></LinkDialog>\r\n        )\r\n        buttonArr.push(\r\n            <ImageDialog {...dialogButtons.image} ></ImageDialog>\r\n        )\r\n        return (\r\n            <ToolbarRow>\r\n                {buttonArr}\r\n            </ToolbarRow>\r\n        )\r\n    }\r\n\r\n    // const currentSelection = () => {\r\n    //     return (\r\n    //         <div style={{ color: \"white\" }}>\r\n    //             Selection: {props.value || \"none\"}\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    const render = () => {\r\n        return (\r\n            createToolbarButtons()\r\n        )\r\n    }\r\n\r\n    return render();\r\n}\r\n","/**\r\n * Utility to test and get special characters on the sides of the inputted string. If they are the same, the side character(s) are returned, else null is returned.\r\n * @param val String input to test\r\n * @param regex Regex to test against\r\n */\r\nexport const utilGetSideChars = (val: string, regex: RegExp): string | null => {\r\n    const result = (val.split(regex).filter(x => x !== \"\"));\r\n    const invCheck = (data1: string, data2: string) => {\r\n        let invData2 = data2.split(\"\").reverse().join(\"\");\r\n        return data1 === invData2;\r\n    }\r\n    let matchValidation = false;\r\n    if (result[0] === result[result.length - 1].replace(\"/\", \"\") || invCheck(result[0], result[result.length - 1])) {\r\n        matchValidation = true;\r\n    }\r\n\r\n    if (result.length > 1 && matchValidation) {\r\n        return result[0]\r\n    }\r\n    return null;\r\n}","import { utilEscapeRegExp } from \"./util-escape-regexp\";\r\n\r\n/**\r\n * Returns string with wrapped or unwrapped characters based on\r\n * enclosure value.\r\n * @param content content to wrap or unwrap\r\n * @param wrapChar character(s) to check for\r\n * @param enclose set true to wrap, set false to unwrap\r\n */\r\nexport const utilWrapper = (content: string, enclose: boolean, wrapCharStart: string, wrapCharEnd: string = \"\") => {\r\n    let _content = content;\r\n    let endChar = wrapCharEnd;\r\n    if (!(!!wrapCharEnd && wrapCharEnd.trim() !== \"\")) {\r\n        endChar = wrapCharStart\r\n    }\r\n    if (!!content) {\r\n        if (enclose) {\r\n            _content = `${wrapCharStart}${content.replace(\"\\n\\n\", \"\\n\")}${endChar}`\r\n        }\r\n        if (!enclose) {\r\n            // console.log(`(${utilEscapeRegExp(wrapCharStart)})(.*?)(${utilEscapeRegExp(endChar)}$)`);\r\n\r\n            let regexSplitter = new RegExp(`(${utilEscapeRegExp(wrapCharStart)})(.*?)(${utilEscapeRegExp(endChar)}$)`, \"i\")\r\n            _content = content.split(regexSplitter).filter(x => x !== '' && x !== wrapCharStart)[0]\r\n        }\r\n    }\r\n    return _content;\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useRef } from 'react'\r\nimport { ButtonsToolbar } from '../ButtonsToolbar/ButtonsToolbar'\r\nimport { ComboInsert } from \"../model/ComboInsert\";\r\nimport { Column, StyledTextarea } from '../../Styles/CommonStyles';\r\n\r\ninterface MarkdownInputAreaProps {\r\n    content: string;\r\n    callback: any;\r\n    maxHeight?: string;\r\n    scrollCallback?: any;\r\n    id?: string;\r\n}\r\n\r\nexport function MarkdownInputArea(props: MarkdownInputAreaProps) {\r\n    const [selectedText, setSelectedText] = useState('')\r\n    const [selection, setSelection] = useState({ start: 0, end: 0 })\r\n    const editorRef = useRef<HTMLTextAreaElement>(null)\r\n    const [inputContent, setInputContent] = useState<string>(props.content)\r\n    const [scrollPosition, setScrollPosition] = useState(0);\r\n\r\n    const handleChange = (e: any) => {\r\n        setInputContent(e.target.value);\r\n    }\r\n\r\n    const getScrollPosition = (ref: any) => {\r\n        const position = ((ref.target.scrollTop + ref.target.offsetHeight) / ref.target.scrollHeight) * 100;\r\n        // console.log(\"Input: \", position);\r\n        props.scrollCallback(position)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleScroll = (e: any) => {\r\n            let currentPosition = e.target.scrollTop\r\n            if (scrollPosition !== currentPosition) {\r\n                setScrollPosition(currentPosition);\r\n            }\r\n        }\r\n        if (editorRef.current !== null) {\r\n            editorRef.current.onscroll = handleScroll;\r\n        }\r\n\r\n    }, [scrollPosition]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.content !== inputContent) {\r\n            props.callback(inputContent)\r\n        }\r\n    }, [inputContent, props])\r\n\r\n    useEffect(() => {\r\n        const getSelectedText = () => {\r\n\r\n            let text = inputContent.substring(selection.start, selection.end)\r\n            return text\r\n        }\r\n        setSelectedText(getSelectedText());\r\n\r\n    }, [selection, inputContent])\r\n\r\n    const selectionFocusAfterEffect = (startPos: number = selection.start, endPos: number = selection.end) => {\r\n        if (!!editorRef && !!editorRef.current && !!editorRef.current?.setSelectionRange) {\r\n            editorRef.current.focus();\r\n            editorRef.current.setSelectionRange(startPos, endPos);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        selectionFocusAfterEffect();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.content])\r\n\r\n    const handleIncomingChange = (newVal: string) => {\r\n        const tempSel = selection;\r\n        let newOutput = inputContent.substring(0, selection.start) + newVal + inputContent.substring(selection.end, inputContent.length);\r\n        let lenChange = (newVal.length - (selection.end - selection.start));\r\n        setInputContent(newOutput)\r\n        setSelection({\r\n            start: tempSel.start,\r\n            end: tempSel.end + lenChange,\r\n        })\r\n\r\n        setTimeout(() => {\r\n            editorRef.current?.blur();\r\n            editorRef.current?.focus();\r\n            selectionFocusAfterEffect(tempSel.start, tempSel.end + lenChange);\r\n            if (editorRef.current !== null) {\r\n                editorRef.current.scrollTop = scrollPosition\r\n            }\r\n        }, 10);\r\n\r\n    }\r\n\r\n    /**\r\n     * Inserts data in the input string at the start position and returns the new string. \r\n     * @param input the input to augment\r\n     * @param start the position to insert at\r\n     * @param data the data to insert\r\n     */\r\n    const insert = (input: string, start: number, data: any) => {\r\n        return input.slice(0, start) + String(data) + input.slice(start)\r\n    }\r\n\r\n    const handleInsertCmd = (insertVal: string | ComboInsert, type: string) => {\r\n        // console.log(insertVal, type);\r\n        let updatedContent = inputContent;\r\n        let insertContent = insertVal;\r\n        let index = 0;\r\n        let updatedSelectionLoc = 0;\r\n        if (type.includes('heading')) {\r\n            if (updatedContent.includes('\\n\\n')) {\r\n                index = updatedContent.slice(0, selection.start + 1).lastIndexOf(\"\\n\\n\") + 2;\r\n\r\n            } else {\r\n                index = 0;\r\n            }\r\n            const firstHalf = updatedContent.slice(0, index);\r\n            const headingSection = updatedContent.slice(index, selection.end).split(/(#{1,})(.*)/gi).filter(x => x !== \"\" && !x.includes(\"#\"));\r\n            let heading = headingSection[0].trim();\r\n            const secondHalf = updatedContent.slice(selection.end)\r\n            updatedContent = firstHalf + heading + secondHalf;\r\n\r\n            updatedSelectionLoc = index + heading.length + (typeof insertContent === 'string' ? String(insertContent).length : 1)\r\n\r\n            setSelection({\r\n                start: updatedSelectionLoc,\r\n                end: updatedSelectionLoc\r\n            })\r\n        }\r\n        else {\r\n            index = selection.start;\r\n        }\r\n        if (typeof insertVal !== \"string\") {\r\n            if (type === 'abbr' || type === 'link') {\r\n                updatedContent = insert(updatedContent, index, insertVal.textInsert);\r\n                if (insertVal.topInsert !== '') {\r\n                    updatedContent = insert(updatedContent, 0, insertVal.topInsert)\r\n                }\r\n            }\r\n            if (type === 'img') {\r\n                updatedContent = insert(updatedContent, index, insertVal.textInsert);\r\n            }\r\n        }\r\n        else {\r\n            updatedContent = insert(updatedContent, index, insertVal);\r\n        }\r\n        setInputContent(updatedContent)\r\n\r\n    }\r\n\r\n\r\n    const inputArea = () => {\r\n        return (\r\n            <Column\r\n                id=\"markdownInputAreaColumn\"\r\n                width={\"45%\"} maxHeight={props.maxHeight || 'fit-content'}>\r\n                <ButtonsToolbar\r\n                    insertCmd={handleInsertCmd}\r\n                    callback={handleIncomingChange}\r\n                    value={selectedText}></ButtonsToolbar>\r\n                <StyledTextarea\r\n                    maxHeight={props.maxHeight || 'fit-content'}\r\n                    ref={editorRef}\r\n                    onSelect={(e: any) => {\r\n                        setSelection({\r\n                            start: e.target.selectionStart,\r\n                            end: e.target.selectionEnd\r\n                        })\r\n                    }}\r\n                    onScroll={getScrollPosition}\r\n                    id={props.id !== undefined ? props.id + \"_input_area\" : \"markdown_editor_input_area\"} className=\"markdown_textarea\"\r\n                    value={inputContent}\r\n                    onChange={handleChange}>\r\n                </StyledTextarea>\r\n\r\n            </Column>\r\n\r\n        )\r\n    }\r\n\r\n    const render = () => {\r\n        return (\r\n            inputArea()\r\n        )\r\n    }\r\n\r\n    return render();\r\n}\r\n\r\n\r\nexport const MemorizedMarkdownInputArea = React.memo(MarkdownInputArea)","import React, { useEffect, useState } from 'react'\r\nimport { MarkdownProps } from './model/Markdown'\r\nimport \"./MarkdownEditor.css\"\r\nimport { MemorizedMarkdownPreviewArea, MarkdownPreviewArea } from './MarkdownPreviewArea/MarkdownPreviewArea';\r\nimport { MemorizedMarkdownInputArea, MarkdownInputArea } from './MarkdownInputArea/MarkdownInputArea';\r\nimport { Row } from '../Styles/CommonStyles';\r\n\r\n// ---------------------------------\r\n\r\n\r\nexport function MarkdownEditor(props: MarkdownProps) {\r\n    const [content, setContent] = useState(props.content !== undefined ? props.content : 'Add content')\r\n    let previewRefVal: any;\r\n    const handleChange = (e: string) => {\r\n        if (e !== content) {\r\n            setTimeout(() => {\r\n                setContent(e);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    const handlePreviewRef = (e: any) => {\r\n        previewRefVal = e;\r\n    }\r\n\r\n    const handleInputScrollPosition = (e: any) => {\r\n        if (previewRefVal.current !== undefined) {\r\n\r\n            let scrollTop = (((e) * previewRefVal.current.scrollHeight) / 100) - (previewRefVal.current.offsetHeight);\r\n            if (scrollTop <= 0) {\r\n                scrollTop = 0;\r\n            }\r\n            previewRefVal.current.scrollTop = scrollTop;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.callback !== undefined) {\r\n            props.callback(content);\r\n        }\r\n    }, [content, props, props.editable])\r\n\r\n    const addEditZone = () => {\r\n        return (\r\n            <Row\r\n                gap={15}\r\n                flex={1}\r\n                maxHeight={props.maxEditorHeight !== undefined ? props.maxEditorHeight : '800px'}\r\n                minHeight={props.minEditorHeight !== undefined ? props.maxEditorHeight : '800px'}>\r\n                {\r\n                    props.editable && <MarkdownInputArea\r\n                        id={props.id}\r\n                        maxHeight={props.maxEditorInputHeight !== undefined ? props.maxEditorInputHeight : 'calc(98% - 10px)'}\r\n                        callback={handleChange}\r\n                        scrollCallback={handleInputScrollPosition}\r\n                        content={content}\r\n                    ></MarkdownInputArea>\r\n                }\r\n                <MarkdownPreviewArea\r\n                    content={content}\r\n                    id={props.id}\r\n                    maxHeight={props.maxEditorPreviewHeight !== undefined ? props.maxEditorPreviewHeight : 'calc(98% - 5px)'}\r\n                    borderedPreview={props.borderedPreview !== undefined ? props.borderedPreview : true}\r\n                    editable={props.editable}\r\n                    previewRefCallback={handlePreviewRef}\r\n                ></MarkdownPreviewArea>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    const render = () => {\r\n        return addEditZone()\r\n    }\r\n    return render();\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport ReactQuill from 'react-quill';\r\nimport { IQuillEditor } from '../model/RichText';\r\nimport './QuillEditor.css'\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\n\r\nexport default function QuillEditor(props: IQuillEditor) {\r\n\r\n    const editorRef = useRef<ReactQuill>(null)\r\n\r\n    const [value, setValue] = useState(props.value !== undefined ? props.value : '')\r\n    const handleChange = (_value: any) => {\r\n        setValue(_value)\r\n        props.contentCallback(_value)\r\n    }\r\n    const modules = {\r\n        clipboard: {\r\n            matchVisual: false\r\n        },\r\n        toolbar: {\r\n            container: `#${props.toolbarId}`,\r\n            handlers: [\r\n                \"link\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if (editorRef !== null && editorRef !==undefined) {\r\n        props.callback(editorRef);\r\n        if (editorRef.current !== null) {\r\n            editorRef.current.getEditor().enable(props.editing)\r\n        }\r\n        // }\r\n    }, [editorRef, props.editing]);\r\n    const renderReactQuill = () => {\r\n        return (\r\n            <ReactQuill\r\n                ref={editorRef}\r\n                id={props.editorId}\r\n                defaultValue={value}\r\n                onChange={handleChange}\r\n                modules={modules}\r\n            />\r\n        )\r\n    }\r\n\r\n    const render = () => {\r\n        return (\r\n            <div className={`${props.editing ? 'ql-active' : \"\"}`}>\r\n                {renderReactQuill()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     props.callback(editorRef)\r\n    // }, [props])\r\n\r\n    return render();\r\n}\r\n","export interface IRichText {\r\n    id?: string,\r\n    toolbarStyle?: string,\r\n    buttons?: string[],\r\n    value?: string,\r\n    editing: boolean,\r\n    callback?: any\r\n}\r\n\r\nexport interface IQuillEditor {\r\n    editorId: string,\r\n    toolbarId: string,\r\n    toolbarStyle?: string,\r\n    editing: boolean,\r\n    buttons?: string[],\r\n    value?: string,\r\n    callback?: any,\r\n    contentCallback?: any\r\n}\r\n\r\nexport interface IToolbarButton {\r\n    key: string,\r\n    icon: string,\r\n    tooltip: string,\r\n    value?: any,\r\n    ariaLabel?: string | undefined,\r\n    callback?: any\r\n    position?: any | undefined,\r\n    buttonStyle?: string,\r\n    buttonText?: string,\r\n    disabled?: boolean,\r\n    className?: string,\r\n    childButtons?: IToolbarButton[],\r\n    isDefault?: boolean\r\n}\r\n\r\n\r\n\r\nexport type TextAlignment = \"left\" | \"right\" | \"center\" | \"justify\";\r\nexport enum TextAlignmentType {\r\n    left = 'left',\r\n    right = 'right',\r\n    center = 'center',\r\n    justify = 'justify',\r\n\r\n}\r\nexport interface IRange {\r\n    index: number;\r\n    length: number;\r\n}\r\nexport interface IAbbr {\r\n    title: string,\r\n    text: string,\r\n    range: IRange\r\n}\r\n\r\nexport const LIST_TYPES = ['ordered-list', 'bulleted-list']\r\nexport type ListFormat = 'ordered' | 'bullet';\r\nexport enum ListFormatType {\r\n    bulletedList = 'bullet',\r\n    orderedList = 'ordered'\r\n}\r\n\r\nexport type BlockFormat = \"H1\" | \"H2\" | \"H3\" | \"H4\" | \"H5\" | \"H6\" | \"blockquote\" | \"paragraph\" | \"pullQuote\";\r\n\r\nexport enum BlockFormatType {\r\n    paragraph = 'paragraph',\r\n    headingOne = 'H1',\r\n    headingTwo = 'H2',\r\n    headingThree = 'H3',\r\n    headingFour = 'H4',\r\n    blockquote = 'blockquote',\r\n    pullQuote = 'pullQuote'\r\n};\r\n\r\nexport type IndentDir = -1 | 1;\r\nexport enum IndentDirType {\r\n    left = -1,\r\n    right = 1\r\n}\r\n\r\nexport type TextStyle = \"italic\" | \"bold\" | \"strike\" | \"underline\" | \"sub\" | \"super\"\r\nexport enum TextStyleType {\r\n    bold = 'bold',\r\n    italic = 'italic',\r\n    strike = 'strike',\r\n    underline = 'underline',\r\n    sub = 'sub',\r\n    super = 'super'\r\n}\r\n\r\n\r\nexport interface ILink {\r\n    text: string;\r\n    href?: string;\r\n    target?: string;\r\n    title?: string;\r\n    range: IRange\r\n}\r\n\r\nexport interface IImageLink {\r\n    range: IRange,\r\n    title: string,\r\n    src: string,\r\n    width: number;\r\n    height: number;\r\n    alt: string;\r\n    float: string;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Button, Tooltip, MenuItem, Select, FormControl } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from '@material-ui/core';\r\nimport { IToolbarButton } from './model/RichText';\r\nimport Icon from \"@material-ui/core/Icon\";\r\nexport function CreateStyleButton(buttonData: IToolbarButton) {\r\n    const [selection, setSelection] = useState(buttonData.value);\r\n\r\n    useEffect(() => {\r\n        // debugger;\r\n        setSelection(buttonData.value)\r\n    }, [buttonData.value])\r\n    const buttonStyles = makeStyles(() => createStyles({\r\n        buttonLabel: {\r\n            justifyContent: \"start\",\r\n            padding: '0 0 0 6px',\r\n            minWidth: 'auto'\r\n        },\r\n        menuWidth: {\r\n            minWidth: 'auto',\r\n            paddingLeft: '0 0 0 3px'\r\n        },\r\n        color: {\r\n            color: \"black\"\r\n        },\r\n        topPadding: {\r\n            paddingTop: 4\r\n        },\r\n        transformNone: {\r\n            textTransform: 'none'\r\n        },\r\n        displayNone: {\r\n            display: 'none'\r\n        }\r\n    }));\r\n\r\n    const handleCallback = (event: any) => {\r\n        ;\r\n        if (buttonData?.childButtons) {\r\n            const item = buttonData.childButtons.filter((x) => x.value === event.target.value);\r\n            // console.log(item[0].buttonText);\r\n            item[0].callback(event);\r\n            setSelection(event.target.value);\r\n        }\r\n    };\r\n    const classes = buttonStyles();\r\n\r\n    const buttonRenderCustom = (buttonData: IToolbarButton) => {\r\n        return (buttonData?.icon !== '' ?\r\n            <div id={`rec_mi_${buttonData.key}`}><span><Icon id={`rec_mi_${buttonData.icon}`} className={`${classes.topPadding} ${classes.color}`}>\r\n                {buttonData.icon}\r\n            </Icon> <strong>{buttonData?.buttonText}</strong></span></div>\r\n            : <div id={`rec_mi_${buttonData.key}`}><span><strong>{buttonData?.buttonText}</strong></span></div>)\r\n    }\r\n    const buttonRenderDefault = (buttonData: IToolbarButton) => {\r\n        return buttonData.callback();\r\n    }\r\n    const render = () => {\r\n        return (\r\n            <div key={`${buttonData.key}`}>\r\n                {buttonData.childButtons !== undefined && buttonData.childButtons.length > 0 ?\r\n                    <FormControl variant=\"filled\" className={buttonData.buttonStyle}>\r\n                        <Tooltip placement={buttonData?.position ? buttonData.position : \"top\"} title={`${buttonData.tooltip}`}>\r\n                            <Select\r\n                                aria-label={buttonData.ariaLabel}\r\n                                labelId={`${buttonData.key}_label`}\r\n                                id={`${buttonData.key}_Id`}\r\n                                value={selection}\r\n                                onChange={(event: any) => {\r\n\r\n                                    handleCallback(event);\r\n                                }}\r\n                            >\r\n                                {buttonData.childButtons.map((button) => (\r\n                                    <MenuItem\r\n\r\n                                        disabled={button.disabled} className={`${classes.menuWidth} ${button.disabled ? classes.displayNone : \"\"}`} key={button.key} value={button.value}>\r\n                                        <Tooltip placement={button?.position ? button.position : \"top\"} title={`${button.tooltip}`}>\r\n                                            <div className={classes.buttonLabel}>\r\n                                                {button?.icon !== '' ?\r\n                                                    <div id={`rec_mi_menu_${button.key}`}>\r\n                                                        <Icon >\r\n                                                            {button.icon}\r\n                                                        </Icon> <span> {button?.buttonText}</span>\r\n                                                    </div>\r\n                                                    : <span > {button?.buttonText}</span>}\r\n                                            </div>\r\n                                        </Tooltip>\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Tooltip>\r\n                    </FormControl>\r\n                    : <div className={buttonData.disabled ? classes.displayNone : ''}>\r\n                        <Tooltip placement={buttonData?.position ? buttonData.position : \"top\"} title={`${buttonData.tooltip}`}>\r\n                            <Button aria-label={buttonData.ariaLabel} onMouseDown={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => buttonData.callback(e)} className={`${buttonData.buttonStyle} ${classes.transformNone}`}>\r\n                                {buttonData.isDefault ? buttonRenderDefault(buttonData) : buttonRenderCustom(buttonData)}\r\n                            </Button>\r\n                        </Tooltip></div>}\r\n            </div>\r\n        );\r\n    }\r\n    return render();\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { CreateStyleButton } from '../CreateStyleButton';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, makeStyles, Theme, createStyles, FormGroup } from '@material-ui/core';\r\nimport { IAbbr } from '../model/RichText';\r\nexport interface IAbbrDialogProps {\r\n    quillEditor: any;\r\n    callback?: any;\r\n    btnStyle?: string;\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    column: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\"\r\n\r\n    }\r\n}))\r\n\r\nexport default function AbbrDialog(props: IAbbrDialogProps) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [abbr, setAbbr] = useState<IAbbr>({\r\n        text: '',\r\n        title: '',\r\n        range: {\r\n            index: 0,\r\n            length: 0\r\n        }\r\n    })\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        props.callback(abbr);\r\n        setOpen(false);\r\n\r\n    }\r\n    const abbrButton = {\r\n        key: 'abbreviation',\r\n        icon: '',\r\n        tooltip: 'Abbreviation',\r\n        buttonText: '<abbr>',\r\n        ariaLabel: 'Add Abbreviation over selected text',\r\n        callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => handleOpen(),\r\n        position: 'top',\r\n        buttonStyle: props.btnStyle\r\n    };\r\n\r\n    useEffect(() => {\r\n        const quill = props.quillEditor;\r\n        if (open) {\r\n            if (props?.quillEditor) {\r\n                const range = quill.getSelection();\r\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                let [leaf, offset] = quill.getLeaf(range !== null ? range.index + 1 : 0)\r\n                // const parentDomNode = leaf.parent.domNode;\r\n                if (leaf !== null && leaf.parent.domNode.tagName === \"ABBR\") {\r\n                    setAbbr({\r\n                        text: leaf.parent.domNode.textContent !== undefined ? leaf.parent.domNode.textContent.trim() : \"\",\r\n                        title: leaf.parent.domNode.title,\r\n                        range: range\r\n                    })\r\n                }\r\n                else {\r\n\r\n                    if (!!range && range.length > 0) {\r\n                        let innerText = quill.getText(range.index, range.length);\r\n                        setAbbr({\r\n                            text: innerText,\r\n                            title: '',\r\n                            range: range\r\n                        })\r\n                    }\r\n                    if ((!!range) && range.index > 0) {\r\n                        setAbbr({\r\n                            text: '',\r\n                            title: '',\r\n                            range: range\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [open, props, props.quillEditor])\r\n    const handleSubmit = () => {\r\n        handleClose();\r\n        // props.callback(abbr);\r\n    };\r\n\r\n    const render = () => {\r\n        return (\r\n            <div >\r\n                {CreateStyleButton(abbrButton)}\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-abbr\">\r\n                    <DialogTitle id=\"form-dialog-abbr-title\">\r\n                        Insert Abbreviation\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Fill in the fields below to add abbreviation.\r\n                        </DialogContentText>\r\n                        <FormGroup aria-label=\"Abbreviation form group\" className={classes.column}>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"Text\"\r\n                                label=\"Text\"\r\n                                type=\"text\"\r\n                                value={abbr.text}\r\n                                onChange={(e: any) => {\r\n                                    setAbbr({\r\n                                        ...abbr,\r\n                                        text: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"title\"\r\n                                label=\"Title\"\r\n                                type=\"text\"\r\n                                value={abbr.title}\r\n                                onChange={(e: any) => {\r\n                                    setAbbr({\r\n                                        ...abbr,\r\n                                        title: e.target.value,\r\n\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleClose()} color=\"primary\">\r\n                            Cancel\r\n                            </Button>\r\n                        <Button onClick={() => handleSubmit()} color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return render();\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { CreateStyleButton } from '../CreateStyleButton';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, makeStyles, Theme, createStyles, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\r\nimport { ILink } from '../model/RichText';\r\nexport interface ILinkDialogProps {\r\n    quillEditor: any;\r\n    callback?: any;\r\n    btnStyle?: string;\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    column: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\"\r\n\r\n    }\r\n}))\r\n\r\nexport default function LinkDialog(props: ILinkDialogProps) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    // const [urlErrorText, setUrlErrorText] = useState('');\r\n    const [urlError, setUrlError] = useState(false)\r\n    const [link, setLink] = useState<ILink>({\r\n        text: '',\r\n        href: '',\r\n        target: '',\r\n        title: '',\r\n        range: {\r\n            index: 0,\r\n            length: 0\r\n        }\r\n    })\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        props.callback(link)\r\n        setOpen(false);\r\n    }\r\n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let target = \"\";\r\n        if (event.target.checked) {\r\n            target = \"_blank\";\r\n        }\r\n        setLink({\r\n            ...link,\r\n            target: target,\r\n        });\r\n    }\r\n    const linkButton = {\r\n        key: 'insert_link',\r\n        icon: 'insert_link',\r\n        tooltip: 'Insert link',\r\n        ariaLabel: 'Insert link',\r\n        value: 'insertLink',\r\n        callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => handleOpen(),\r\n        position: 'top',\r\n        buttonStyle: props.btnStyle\r\n    };\r\n\r\n    useEffect(() => {\r\n        const quill = props.quillEditor;\r\n        if (open) {\r\n            if (props?.quillEditor) {\r\n                const range = quill.getSelection();\r\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                let [leaf, offset] = quill.getLeaf(range !== null ? range.index + 1 : 0)\r\n                if (leaf !== null && leaf.parent.domNode.tagName === \"A\") {\r\n                    setLink({\r\n                        text: leaf.parent.domNode.innerText !== undefined ? leaf.parent.domNode.innerText.trim() : '',\r\n                        href: leaf.parent.domNode.href,\r\n                        target: leaf.parent.domNode.target,\r\n                        title: leaf.parent.domNode.title,\r\n                        range: range\r\n                    })\r\n                }\r\n                else {\r\n                    if (!!range && range.length > 0) {\r\n                        let innerText = range?.length > 0 ? quill.getText(range.index, range.length) : \"\";\r\n                        setLink({\r\n                            text: innerText,\r\n                            href: '',\r\n                            target: '',\r\n                            title: '',\r\n                            range: range\r\n                        })\r\n                    }\r\n                    if ((!!range) && range.index > 0) {\r\n                        setLink({\r\n                            text: '',\r\n                            href: '',\r\n                            target: '',\r\n                            title: '',\r\n                            range: range\r\n\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [open, props, props.quillEditor])\r\n\r\n    const handleSubmit = () => {\r\n        handleClose();\r\n        // props.callback(link)\r\n    };\r\n\r\n    const render = () => {\r\n        return (\r\n            <div >\r\n                {CreateStyleButton(linkButton)}\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-abbr\">\r\n                    <DialogTitle id=\"form-dialog-abbr-title\">\r\n                        Insert Link\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Fill in the fields below to add address.\r\n                        </DialogContentText>\r\n                        <FormGroup aria-label=\"Link addition form group.\" className={classes.column}>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"Text\"\r\n                                label=\"Text to display\"\r\n                                type=\"text\"\r\n                                value={link.text}\r\n                                onChange={(e: any) => {\r\n                                    setLink({\r\n                                        ...link,\r\n                                        text: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"Title\"\r\n                                label=\"Tooltip text to display\"\r\n                                type=\"text\"\r\n                                value={link.title}\r\n                                onChange={(e: any) => {\r\n                                    setLink({\r\n                                        ...link,\r\n                                        title: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"href_link\"\r\n                                label=\"Address\"\r\n                                placeholder=\"https://\"\r\n                                helperText=\"Ensure link contains https://\"\r\n                                type=\"text\"\r\n                                value={link.href}\r\n                                error={!urlError}\r\n                                onChange={(e: any) => {\r\n                                    // debugger;\r\n                                    const regex = /^http([s]?):\\/\\/.*/;\r\n                                    if (!regex.test(e.target.value)) {\r\n                                        setUrlError(false)\r\n                                    } else {\r\n                                        setUrlError(true)\r\n                                    }\r\n\r\n                                    setLink({\r\n                                        ...link,\r\n                                        href: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <FormControlLabel\r\n                                label=\"Open in a new tab?\"\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={link.target === \"_blank\" ? true : false}\r\n                                        onChange={(e) => handleCheckboxChange(e)}\r\n                                        name=\"target\"\r\n                                    />\r\n                                }\r\n                            />\r\n                        </FormGroup>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleClose()} color=\"primary\">\r\n                            Cancel\r\n                            </Button>\r\n                        <Button disabled={!urlError} onClick={() => handleSubmit()} color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return render();\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { IFontColorButtonProps } from '../model/ColorPicker';\r\nimport { CompactPicker } from 'react-color';\r\nimport { withStyles, MenuProps, Menu } from '@material-ui/core';\r\nimport { CreateStyleButton } from '../CreateStyleButton';\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n        border: '1px solid #d3d4d5',\r\n    },\r\n})((props: MenuProps) => (\r\n    <Menu\r\n        elevation={0}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nexport default function FontColorButton(props: IFontColorButtonProps) {\r\n    const [currColor, setCurrColor] = useState(props.defaultColor);\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    let buttonInfo = props.buttonParams;\r\n    const handleColorChange = (color: any) => {\r\n        setCurrColor(color.hex);\r\n        changeIconColor(color.hex);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.defaultColor !== currColor) {\r\n            props.callback(currColor, props.buttonType);\r\n            // handleClose();\r\n        }\r\n\r\n    }, [currColor, props, props.defaultColor])\r\n\r\n    const changeIconColor = (color: string) => {\r\n        document?.querySelectorAll(`#rec_mi_${props.buttonParams.key}>span`)[0]?.setAttribute('style', `font-size:18px;border-bottom: 3px solid ${color};`);\r\n    }\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const compactPicker = () => {\r\n        return (\r\n            <CompactPicker\r\n                color={currColor}\r\n                onChangeComplete={handleColorChange} />\r\n        )\r\n    }\r\n\r\n    const render = () => {\r\n        buttonInfo.callback = (e: React.MouseEvent<HTMLElement>) => handleClick(e);\r\n        if (props.defaultColor !== undefined) {\r\n            changeIconColor(props.defaultColor);\r\n        }\r\n        return (\r\n            <div>\r\n                {CreateStyleButton(buttonInfo)}\r\n                <StyledMenu\r\n                    id={`${props.buttonParams.key}_${props.buttonType}`}\r\n                    anchorEl={anchorEl}\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                >\r\n                    {compactPicker()}\r\n                    {/* <MenuItem onClick={(e) => { e.preventDefault() }}>\r\n                    </MenuItem> */}\r\n                </StyledMenu>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return render();\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { CreateStyleButton } from '../CreateStyleButton';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, makeStyles, Theme, createStyles, FormGroup, Select, MenuItem, FormControl, InputLabel } from '@material-ui/core';\r\nimport { IImageLink } from '../model/RichText';\r\nexport interface ILinkDialogProps {\r\n    quillEditor: any;\r\n    callback?: any;\r\n    btnStyle?: string;\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    column: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyItems: \"center\",\r\n        // alignItems: \"center\",\r\n        width: '100%'\r\n\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n}))\r\n\r\nexport default function ImageDialog(props: ILinkDialogProps) {\r\n    const initialImageState = {\r\n        title: 'image',\r\n        src: '',\r\n        range: {\r\n            index: 0,\r\n            length: 0\r\n        },\r\n        alt: 'image',\r\n        width: 150,\r\n        height: 150,\r\n        float: 'none'\r\n    }\r\n\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [range, setRange] = useState({ index: 0, length: 0 })\r\n    const [urlError, setUrlError] = useState(false)\r\n    const [image, setImage] = useState<IImageLink>({ ...initialImageState })\r\n\r\n    const handleOpen = () => {\r\n        // console.log(\"handle Open: \", props);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        // debugger;\r\n        let tempImage = image;\r\n        tempImage.range = range;\r\n        props.callback(tempImage, true)\r\n        setImage({ ...initialImageState })\r\n        setOpen(false);\r\n    }\r\n\r\n    const linkButton = {\r\n        key: 'insert_photo',\r\n        icon: 'insert_photo',\r\n        tooltip: 'Insert Picture',\r\n        ariaLabel: 'Insert Picture.',\r\n        callback: () => handleOpen(),\r\n        position: 'top',\r\n        buttonStyle: props.btnStyle\r\n    };\r\n\r\n    useEffect(() => {\r\n        // console.log(\"in use effect: \", props);\r\n\r\n        const quill = props.quillEditor;\r\n        if (open) {\r\n            if (quill !== undefined && quill !== null) {\r\n                const tempRange = quill.getSelection();\r\n                // range = quill.getSelection();\r\n                if (tempRange !== null) {\r\n                    setRange(tempRange);\r\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                    // debugger;\r\n                    if (tempRange.length > 0) {\r\n                        let [leaf, offset] = quill.getLeaf(tempRange !== null ? tempRange.index + tempRange.length : 0);\r\n                        const imgDomNode = leaf.domNode;\r\n                        if (leaf?.domNode.tagName === \"IMG\") {\r\n                            setImage({\r\n                                height: imgDomNode.scrollHeight,\r\n                                width: imgDomNode.scrollWidth,\r\n                                alt: image.alt === \"\" ? 'image' : image.alt,\r\n                                float: imgDomNode.style.float,\r\n                                title: leaf.domNode.textContent !== undefined && leaf.domNode.textContent !== \"\" ? leaf.domNode.textContent.trim() : 'image',\r\n                                src: leaf.domNode.src !== undefined ? leaf.domNode.src : \"\",\r\n                                range: tempRange\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (tempRange?.length === 0) {\r\n                            let innerText = quill.getText(range.index, tempRange.length);\r\n                            setImage({\r\n                                height: image.height,\r\n                                width: image.width,\r\n                                alt: image.alt !== null ? image.alt : \"image\",\r\n                                float: image.float,\r\n                                title: innerText !== \"\" ? innerText : image.title,\r\n                                src: \"\",\r\n                                range: tempRange\r\n                            })\r\n                            // console.log(image);\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [open, props, props.quillEditor]);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(\"range\", range)\r\n    // }, [range]);\r\n\r\n    const handleSubmit = () => {\r\n        handleClose();\r\n        let tempImage = image;\r\n        tempImage.range = range;\r\n        props.callback(tempImage, false)\r\n    };\r\n\r\n    const handleFloatChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setImage({\r\n            ...image,\r\n            float: event.target.value as string\r\n        });\r\n    }\r\n\r\n    const render = () => {\r\n        return (\r\n            <div >\r\n                {CreateStyleButton(linkButton)}\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-abbr\">\r\n                    <DialogTitle id=\"form-dialog-abbr-title\">\r\n                        Insert Link\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Fill in the fields below to add image by address.\r\n                        </DialogContentText>\r\n                        <FormGroup aria-label=\"Link addition form group.\" className={classes.column}>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"Text\"\r\n                                label=\"Text to display\"\r\n                                type=\"text\"\r\n                                value={image.title}\r\n                                onChange={(e: any) => {\r\n                                    setImage({\r\n                                        ...image,\r\n                                        title: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"AltText\"\r\n                                label=\"Alternate Text to include\"\r\n                                type=\"text\"\r\n                                value={image.alt}\r\n                                onChange={(e: any) => {\r\n                                    setImage({\r\n                                        ...image,\r\n                                        alt: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"url\"\r\n                                label=\"Address\"\r\n                                placeholder=\"https://\"\r\n                                helperText=\"Ensure link contains https:// or http://\"\r\n                                type=\"text\"\r\n                                value={image.src}\r\n                                error={!urlError}\r\n                                onChange={(e: any) => {\r\n                                    // debugger;\r\n                                    const regex = /^http([s]?):\\/\\/.*/;\r\n                                    if (!regex.test(e.target.value)) {\r\n                                        setUrlError(false)\r\n                                    } else {\r\n                                        setUrlError(true)\r\n                                    }\r\n\r\n                                    setImage({\r\n                                        ...image,\r\n                                        src: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"Width\"\r\n                                label=\"Image width\"\r\n                                type=\"number\"\r\n                                value={image.width}\r\n                                onChange={(e: any) => {\r\n                                    setImage({\r\n                                        ...image,\r\n                                        width: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"Height\"\r\n                                label=\"Image Height\"\r\n                                type=\"number\"\r\n                                value={image.height}\r\n                                onChange={(e: any) => {\r\n                                    setImage({\r\n                                        ...image,\r\n                                        height: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"imgFloat\">Image Float:</InputLabel>\r\n                                <Select\r\n                                    labelId=\"Image float selection\"\r\n                                    id=\"imgFloat\"\r\n                                    value={image.float}\r\n                                    onChange={handleFloatChange}\r\n                                >\r\n                                    <MenuItem value=\"none\">\r\n                                        <em>None</em>\r\n                                    </MenuItem>\r\n                                    <MenuItem value={'left'}>Left</MenuItem>\r\n                                    <MenuItem value={'right'}>Right</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleClose()} color=\"primary\">\r\n                            Cancel\r\n                            </Button>\r\n                        <Button\r\n                            disabled={!urlError}\r\n                            onClick={() => handleSubmit()} color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return render();\r\n}","import React, { useReducer, useEffect, useState } from 'react'\r\nimport { IndentDir, TextStyle, TextStyleType, IToolbarButton, IndentDirType, TextAlignmentType, TextAlignment, ListFormat, ListFormatType, BlockFormat, BlockFormatType, IAbbr, ILink, IRange, IImageLink } from '../model/RichText';\r\nimport { makeStyles, createStyles, Theme, AppBar, withStyles } from '@material-ui/core';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { CreateStyleButton } from '../CreateStyleButton';\r\nimport './CustomToolbar.css'\r\nimport { Quill } from 'react-quill';\r\nimport AbbrDialog from '../AbbrDialog/AbbrDialog';\r\nimport LinkDialog from '../LinkDialog/LinkDialog';\r\nimport FontColorButton from '../FontColorButton/FontColorButton';\r\nimport { FontColorButtonType } from '../model/ColorPicker';\r\nimport ImageDialog from '../ImageDialog/ImageDialog';\r\n\r\nexport interface IToolbar {\r\n    id: string,\r\n    editorRef: any,\r\n    toolbarStyle?: string,\r\n    editorId: string,\r\n    editing?: boolean\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    flexGrow1: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        background: \"#1e272c\"\r\n    },\r\n    tooltip: {\r\n        fontSize: \"12pt!important\"\r\n    },\r\n    toolbar: {\r\n        minHeight: '50px',\r\n        paddingTop: '2px',\r\n        paddingBottom: '2px',\r\n        paddingLeft: '5px',\r\n        paddingRight: '5px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap'\r\n\r\n    },\r\n    cmdButton: {\r\n        marginRight: theme.spacing(1),\r\n        height: '40px!important',\r\n        marginTop: 2,\r\n        marginBottom: 2,\r\n        color: \"black!important\",\r\n        backgroundColor: 'lightgray!important',\r\n        width: 'auto!important',\r\n        minWidth: '40px',\r\n        '&:hover': {\r\n            backgroundColor: 'darkgray'\r\n        }\r\n    },\r\n    selectEmpty: {\r\n        marginRight: theme.spacing(1),\r\n        backgroundColor: 'lightgray',\r\n        minWidth: '40px',\r\n        '&:hover': {\r\n            backgroundColor: 'darkgray'\r\n        },\r\n        '&>.MuiInputBase-root>.MuiSelect-root': {\r\n            paddingTop: 5,\r\n            paddingBottom: 5,\r\n            paddingLeft: 0,\r\n            height: 25,\r\n            marginTop: 5\r\n        }\r\n    },\r\n    pullQuoteStyle: {\r\n        padding: 32,\r\n        borderLeft: 'none',\r\n        borderRight: 'none',\r\n        textAlign: 'center',\r\n        fontSize: 24,\r\n        margin: '28px 0 28px 0',\r\n        borderTop: '2px solid lightgray',\r\n        borderBottom: '2px solid lightgray',\r\n        '& span': {\r\n            fontStyle: 'italic',\r\n        }\r\n    },\r\n    blockStyle: {\r\n        marginTop: 2,\r\n        marginBottom: 2,\r\n        marginRight: theme.spacing(1),\r\n        backgroundColor: 'lightgray',\r\n        // minHeight: '25px',\r\n        minWidth: '135px',\r\n        '&:hover': {\r\n            backgroundColor: 'darkgray'\r\n        },\r\n        '&>.MuiInputBase-root>.MuiSelect-root': {\r\n            paddingTop: 5,\r\n            paddingBottom: 5,\r\n            paddingLeft: 0,\r\n            height: 25,\r\n            marginTop: 5\r\n        }\r\n    },\r\n    displayNone: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\n// let Delta = Quill.import('delta');\r\n//Set custom class marking\r\nlet Parchment = Quill.import('parchment');\r\nlet config = {\r\n    scope: Parchment.Scope.BLOCK,\r\n};\r\nlet MClass = new Parchment.Attributor.Class('mark', 'style', config);\r\nQuill.register(MClass, true)\r\n\r\n// Set headers and add blockquote capability\r\n// let header = Quill.import('formats/header');\r\n// header.tagName = [\r\n//     'H1',\r\n//     'H2',\r\n//     'H3',\r\n//     'H4',\r\n//     'blockquote'];\r\n// Quill.register(header, true);\r\n\r\n// Set font sizes\r\nlet SizeClass = Quill.import('formats/size');\r\n\r\nSizeClass.whitelist = [\r\n    'small',\r\n    'medium',\r\n    'mediumplus',\r\n    'large',\r\n    'xlarge',\r\n    'xlargeplus',\r\n    'xxlarge',\r\n    'xxxlarge',\r\n    'xxlargeplus',\r\n    'super'];\r\nQuill.register(SizeClass, true);\r\n\r\n// Horizontal line\r\nlet Embed = Quill.import('blots/block/embed');\r\nlet blockEmbed = Quill.import('blots/embed')\r\nlet Inline = Quill.import('blots/inline');\r\n\r\nclass Hr extends Embed {\r\n    static create(value: string) {\r\n        let node: Element = super.create(value);\r\n        if (value === \"new\") {\r\n            node.setAttribute('style', 'height:0px;margin-top:10px;margin-bottom:10px;');\r\n        }\r\n        return node;\r\n    }\r\n}\r\nHr.blotName = 'hr';\r\nHr.className = 'rec-hr';\r\nHr.tagName = 'hr'\r\nQuill.register({\r\n    'formats/hr': Hr\r\n})\r\nclass Abbr extends Inline {\r\n    static create(value: IAbbr) {\r\n\r\n        let node: Element = super.create();\r\n        if (value instanceof Object) {\r\n            node.setAttribute('title', value.title);\r\n            node.className = (`rec-abbr abbr_${value.title.replace(/ /g, \"_\")}`)\r\n            node.innerHTML = value.text;\r\n        }\r\n        return node;\r\n\r\n    }\r\n    static value(node: Element) {\r\n        return node\r\n    }\r\n}\r\nAbbr.blotName = \"abbr\";\r\nAbbr.className = \"rec-abbr\";\r\nAbbr.tagName = \"abbr\";\r\nQuill.register(Abbr);\r\n\r\nlet Link = Quill.import('formats/link');\r\nclass ATag extends Link {\r\n    static create(value: ILink | string) {\r\n        let node: Element = super.create();\r\n        if (typeof value === \"string\") {\r\n            node.setAttribute(\"href\", value)\r\n        }\r\n        if (value instanceof Object) {\r\n            value.href !== undefined ? node.setAttribute('href', value.href) : node.setAttribute('href', \"\")\r\n            if (!!value?.target && value?.target !== \"\") {\r\n                node.setAttribute('target', value.target);\r\n                node.setAttribute('rel', \"noreferrer noopener\");\r\n                node.setAttribute('data-interception', 'off');\r\n            }\r\n            else {\r\n                node.removeAttribute('target');\r\n            }\r\n            if (value.title !== \"\" && value.title !== undefined) {\r\n                node.setAttribute('title', value.title);\r\n            }\r\n            node.innerHTML = value.text !== undefined ? value.text.trim() : \"\";\r\n        }\r\n        return node;\r\n    }\r\n    static value(node: Element) {\r\n        return node;\r\n    }\r\n}\r\nATag.blotName = \"link\";\r\nATag.className = \"rec-a\";\r\nATag.tagName = \"a\";\r\nQuill.register(ATag);\r\nclass TableTag extends Inline {\r\n    static create(value: any) {\r\n        console.log('table:', value);\r\n        let node: Element = super.create();\r\n        node.setAttribute(\"id\", `rec_table_${value.tableCount + 1}`)\r\n        node.setAttribute(\"style\", \"border:1px solid black;\");\r\n        node.appendChild(document.createElement(\"thead\"));\r\n        node.appendChild(document.createElement(\"tbody\"))\r\n        return node;\r\n    }\r\n\r\n    static value(node: Element) {\r\n        return node;\r\n    }\r\n}\r\n\r\nTableTag.blotName = \"table\";\r\nTableTag.className = \"rect-table\";\r\nTableTag.tagName = \"table\";\r\nQuill.register(TableTag);\r\n\r\nclass ImageTag extends blockEmbed {\r\n    static create(value: IImageLink) {\r\n        let node: Element = super.create();\r\n        if (value instanceof Object) {\r\n            value.src !== undefined ? node.setAttribute('src', value.src) : node.setAttribute('src', \"\")\r\n            node.setAttribute('alt', value.alt);\r\n            node.setAttribute('title', value.title);\r\n            node.setAttribute('width', value.width.toString());\r\n            node.setAttribute('height', value.height.toString());\r\n            node.setAttribute('id', `rec-img-${value.title !== undefined ? value.title.replace(\" \", \"-\").toLowerCase() : 'image'}`);\r\n            node.setAttribute('style', `float:${value.float};padding:5px;`)\r\n            node.innerHTML = value.title !== undefined ? value.title.trim() : 'image';\r\n        }\r\n        return node;\r\n    }\r\n    static value(node: Element) {\r\n        return node;\r\n    }\r\n}\r\nImageTag.blotName = \"img\";\r\nImageTag.className = \"rec-img\";\r\nImageTag.tagName = \"img\";\r\nQuill.register(ImageTag);\r\n\r\nexport default function CustomToolbar(props: IToolbar) {\r\n    const classes = useStyles();\r\n    const [linkTagRegister, setLinkTagRegister] = useState(false);\r\n    // let selectedRange = {};\r\n    const [state, setState] = useReducer((state: any, newState: any) =>\r\n        ({ ...state, ...newState }),\r\n        { fontStyle: 'paragraph', alignment: 'left', selectedText: undefined, formats: {}, selectedUrl: undefined, abbrDialog: false, fontColor: \"#000000\", highlightColor: \"#FFFFFF\", fontColorDialog: false, highlightDialog: false, urlDialog: false, tableDialog: false });\r\n\r\n    const getEditor = (): any | undefined => {\r\n        try {\r\n            return props.editorRef!.current?.getEditor();\r\n        } catch (error) {\r\n            return undefined\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        // console.log(\"state updated:\", state);\r\n    }, [state])\r\n    /**\r\n    * Called when richtext selection changes\r\n    */\r\n    const handleChangeSelection = (range: any, oldRange: any, source: any) => {\r\n\r\n        const quill = getEditor();\r\n        try {\r\n            if (quill && range !== null) {\r\n                // Get the selected text\r\n                const selectedTextTemp = quill.getText(range);\r\n\r\n                // Get the current format\r\n                const formatsTemp = quill.getFormat(range);\r\n                // console.log(\"formatsTemp\", formatsTemp);\r\n\r\n                // Get the currently selected url\r\n                const selectedUrlTemp = formatsTemp.link ? formatsTemp.link : undefined;\r\n                setState({\r\n                    selectedText: selectedTextTemp,\r\n                    selectedUrl: selectedUrlTemp,\r\n                    formats: quill.getFormat(range)\r\n                });\r\n\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const applyFormat = (name: string, value: any) => {\r\n        const quill = getEditor();\r\n        if (name === 'mark') {\r\n            quill.format('mark', value);\r\n        }\r\n        else {\r\n            quill.format(name, value);\r\n        }\r\n        setTimeout(() => {\r\n            // console.log(\"applyFormat\");\r\n            handleChangeSelection(quill.getSelection(), undefined, undefined)\r\n            // handleChangeSelection(quill.getSelection())\r\n        }, 100);\r\n    }\r\n\r\n    const clearFormatting = () => {\r\n        const quill = getEditor();\r\n        const range = quill.getSelection();\r\n        if (range !== null) {\r\n            let [leaf, offset] = quill.getLeaf(range.index);\r\n            // console.log(leaf, offset);\r\n\r\n            if (range.length === 0) {\r\n                quill.removeFormat(range.index - offset, range.index + leaf?.domNode.length)\r\n            }\r\n            else {\r\n                quill.removeFormat(range.index, range.length)\r\n                if (leaf.domNode.tagName === \"ABBR\") {\r\n                    const innerLeaf: string = leaf.domNode.innerText !== undefined ? (leaf.domNode.innerText).trim() : \"\";\r\n                    quill.insertText(range.index, innerLeaf, 'user');\r\n                }\r\n            }\r\n            applyFormat('color', '#000000');\r\n            applyFormat('background', '#FFFFFF');\r\n        }\r\n\r\n    }\r\n\r\n    const setCursorPosition = (textLength: number, range: any) => {\r\n        let rangeTemp = range;\r\n        rangeTemp.index = range.index === 0 ? textLength : range.index + range.length;\r\n        rangeTemp.length = 0;\r\n        const quill = getEditor()\r\n        quill.setSelection(rangeTemp, \"api\");\r\n    }\r\n\r\n    const CustomEditor =\r\n    {\r\n        _onTextFormatClick(type: BlockFormat) {\r\n            if (type !== BlockFormatType.pullQuote) {\r\n                clearFormatting();\r\n            }\r\n            switch (type) {\r\n                case BlockFormatType.paragraph:\r\n                    applyFormat(\"header\", false);\r\n                    break;\r\n                case BlockFormatType.pullQuote:\r\n                    applyFormat(\"mark\", type);\r\n                    break;\r\n                default:\r\n                    applyFormat(\"header\", type);\r\n                    break;\r\n            }\r\n        },\r\n        _onChangeIndentClick(direction: IndentDir) {\r\n            // e.preventDefault();\r\n            const quill = getEditor();\r\n            const current = +(quill.getFormat(quill.getSelection() !== null ? quill.getSelection() : 0).indent || 0);\r\n            applyFormat(\"indent\", current + direction)\r\n        },\r\n        _onScriptStyleMarkClick(style: TextStyle) {\r\n            // e.preventDefault()\r\n            let scriptStyle = ''\r\n            if (style === TextStyleType.sub) {\r\n                scriptStyle = state.formats!.script === 'sub' ? '' : 'sub';\r\n            }\r\n            if (style === TextStyleType.super) {\r\n                scriptStyle = state.formats!.script === 'super' ? '' : 'super';\r\n            }\r\n            applyFormat('script', scriptStyle)\r\n        },\r\n        _onStyleMarkClick(style: TextStyle) {\r\n            const newStyleValue = !state.formats[`${style}`];\r\n            applyFormat(style, newStyleValue)\r\n        },\r\n        _onClearFormattingClick() {\r\n            clearFormatting()\r\n        },\r\n        _onAlignmentClick(alignValue: TextAlignment) {\r\n            // e.preventDefault()\r\n            const newAlignValue = alignValue === 'left' ? false : alignValue;\r\n            applyFormat(\"align\", newAlignValue)\r\n        },\r\n        _onListClick(listType: ListFormat) {\r\n            const newListValue = (listType === 'bullet' && state.formats.list === 'bullet') || (listType === 'ordered' && state.formats.list === 'ordered') ? false : listType;\r\n            applyFormat('list', newListValue);\r\n        },\r\n        _onTextFormatColor(color: string, type: FontColorButtonType) {\r\n            // debugger;\r\n            const quill = getEditor()\r\n            if (quill !== undefined) {\r\n                const range = quill.getSelection();\r\n                switch (type) {\r\n                    case \"Font\":\r\n                        if (state.fontColor !== color) {\r\n                            range === null ? applyFormat('color', color) : quill.formatText(range.index, range.length, 'color', color);\r\n                            setState({\r\n                                fontColor: color\r\n                            });\r\n                        }\r\n                        break;\r\n                    case \"Highlight\":\r\n                        if (state.highlightColor !== color) {\r\n                            range === null ? applyFormat('background', color) : quill.formatText(range.index, range.length, 'background', color);\r\n                            setState({\r\n                                highlightColor: color\r\n                            });\r\n                        }\r\n                        break;\r\n                    default:\r\n                        console.error(\"Error in _onTextFormatColor\");\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n        _onAbbrInsert(params: IAbbr) {\r\n            const quill = getEditor()\r\n            if (params.range) {\r\n                if (params.range.length > 0) {\r\n                    quill.deleteText(params.range.index, params.range.length, 'api');\r\n                }\r\n            }\r\n            quill.insertEmbed(params?.range?.index ? params.range.index : 0, 'abbr', {\r\n                title: params.title,\r\n                text: params.text\r\n            }, 'api');\r\n            setCursorPosition(params.text.length, params.range);\r\n        },\r\n        _onLinkInsert(params: ILink) {\r\n            const quill = getEditor();\r\n            if (linkTagRegister === false) {\r\n                // Quill.register(ATag);\r\n                setLinkTagRegister(true);\r\n            }\r\n            if (params.range) {\r\n                if (params.range.length > 0) {\r\n                    quill.deleteText(params.range.index, params.range.length, 'api');\r\n                }\r\n            }\r\n            quill.insertEmbed(params?.range?.index ? params.range.index : 0, 'link', {\r\n                text: params.text,\r\n                href: params.href,\r\n                target: params.target,\r\n                title: params.title,\r\n            }, 'api');\r\n            // quill.insertEmbed(params?.range?.index ? params.range.index : 0, 'a', `<a href=\"${params.href}\" title=\"${params.title}\">${params.text}</a>`, \"user\");\r\n            setCursorPosition(params.text.length, params.range);\r\n        },\r\n        _onInsertImage(params: IImageLink, rangeOnly: boolean) {\r\n            const quill = getEditor();\r\n            if (!rangeOnly) {\r\n                if (params.range !== null) {\r\n                    if (params.range.length > 0) {\r\n                        quill.deleteText(params.range.index, params.range.length, 'user');\r\n                    }\r\n                }\r\n                quill.insertEmbed(params?.range?.index ? params.range.index : 0, 'img', {\r\n                    ...params\r\n                }, 'user');\r\n            }\r\n            setTimeout(() => quill.setSelection(params?.range?.index + 1, \"api\"), 0)\r\n\r\n        },\r\n        _onOpenSource() {\r\n            const quill = getEditor();\r\n            const range = quill.getSelection();\r\n            const content = quill.getContents(range);\r\n            console.log(content);\r\n            const leaf = quill.getLeaf(range.index + 1);\r\n            console.log(\"leaf:\", leaf);\r\n        },\r\n\r\n        // format version\r\n        // _onLinkInsert(params: ILink) {\r\n        //     debugger;\r\n        //     const cursorPosition = params.range!.index;\r\n        //     if (params.range) {\r\n        //         if (params.range.length > 0) {\r\n        //             quill.deleteText(params.range.index, params.range.length, 'user');\r\n        //         }\r\n        //     }\r\n        //     quill.insertText(cursorPosition, params.text);\r\n        //     quill.setSelection(cursorPosition, params.text.length);\r\n        //     quill.formatText(cursorPosition, params.text.length, 'link', params.url);\r\n        // },\r\n        _onHrInsert() {\r\n            const quill = getEditor();\r\n            let range = quill.getSelection();\r\n            if (range) {\r\n                quill.insertEmbed(range.index, \"hr\", \"new\")\r\n            }\r\n        },\r\n        _onFontSizeChange(fontSize: string) {\r\n            applyFormat(\"size\", fontSize)\r\n        },\r\n        _onRowInsertBelow() { },\r\n        _onColumnInsertRight() { },\r\n        _onTableInsert() {\r\n            const quill = getEditor();\r\n            const range = quill.getSelection();\r\n            const count = document.querySelectorAll(\"[id^= 'rec_table_']\");\r\n            console.log('Count: ', count);\r\n            // quill.insertEmbed(range.index, 'table', {\r\n            //     tableCount: count.length\r\n            // }, 'user');\r\n            // getQuillInnerHTML();\r\n            // setQuillInnerHTML();\r\n\r\n        },\r\n        _onTableDelete() { },\r\n        _onDeleteCurrentRow() { },\r\n        _onDeleteCurrentColumn() { }\r\n\r\n    };\r\n\r\n    const getEditorBySelector = (): NodeListOf<Element> => {\r\n        return document.querySelectorAll(`[id='${props.editorId}']`)[0].querySelectorAll(\"[class='ql-editor'\");\r\n    }\r\n\r\n    const getQuillInnerHTML = () => {\r\n\r\n        console.log(getEditorBySelector());\r\n\r\n    }\r\n    // const setQuillInnerHTML = (html?: string) => {\r\n    //     const quill = getEditor();\r\n    //     const range = quill.getSelection();\r\n    // let editor: NodeListOf<Element> = getEditorBySelector();\r\n    // const htmlContent = '<div>Hello</div>';\r\n    // const delta = quill.clipboard.convert(htmlContent);\r\n    // quill.insertEmbed(range.index, 'p', delta);\r\n    // quill.setContents(delta, 'silent')\r\n    // }\r\n\r\n    const basicTable = () => {\r\n        return <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>\r\n                        Col1\r\n                    </td>\r\n                    <td>\r\n                        Col2\r\n                    </td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        Cell1\r\n                    </td>\r\n                    <td>\r\n                        Cell2\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    }\r\n\r\n\r\n    // const insertEmbeddedTag = (params: IAbbr | ILink, tag: string) => {\r\n    //     if (params.range) {\r\n    //         if (params.range.length > 0) {\r\n    //             quill.deleteText(params.range.index, params.range.length, 'user');\r\n    //         }\r\n    //     }\r\n    //     quill.insertEmbed(params?.range?.index ? params.range.index : 0, tag, {\r\n    //         ...params\r\n    //     }, 'user');\r\n    // }\r\n    const fontSizeArray =\r\n        [\r\n            { key: 'small', text: '12' },\r\n            { key: 'medium', text: '14' },\r\n            { key: 'mediumplus', text: '15' },\r\n            { key: 'large', text: '17' },\r\n            { key: 'xlarge', text: '21' },\r\n            { key: 'xlargeplus', text: '24' },\r\n            { key: 'xxlarge', text: '28' },\r\n            { key: 'xxxlarge', text: '32' },\r\n            { key: 'xxlargeplus', text: '36' },\r\n            { key: 'super', text: '42' },\r\n        ];\r\n\r\n    const textFontSizeSelectionArray = (sizeArray: any[]) => {\r\n        // const arr = [];\r\n        return sizeArray.map(num => ({\r\n            key: `fs_${num.text}`,\r\n            buttonText: `${num.text}`,\r\n            icon: '',\r\n            tooltip: '',\r\n            ariaLabel: `Font size ${num.text}`,\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onFontSizeChange(num.key),\r\n            position: 'right',\r\n            value: num.key,\r\n            buttonStyle: classes.cmdButton\r\n        }))\r\n    }\r\n\r\n    const toolbarArray: IToolbarButton[] = [\r\n        {\r\n            key: 'headerType',\r\n            className: '',\r\n            value: state.fontStyle,\r\n            icon: '',\r\n            tooltip: '',\r\n            ariaLabel: 'Format Selection',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onStyleMarkClick(TextStyleType.bold),\r\n            position: 'top',\r\n            buttonStyle: classes.blockStyle,\r\n            childButtons: [\r\n                {\r\n                    key: 'header1',\r\n                    className: 'header1',\r\n                    value: 1,\r\n                    icon: '',\r\n                    tooltip: '',\r\n                    buttonText: 'Header 1',\r\n                    ariaLabel: 'Header 1 Selection',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTextFormatClick(BlockFormatType.headingOne),\r\n                    position: 'top',\r\n                    buttonStyle: '',\r\n                },\r\n                {\r\n                    key: 'header2',\r\n                    className: 'header2',\r\n                    value: 2,\r\n                    icon: '',\r\n                    tooltip: '',\r\n                    buttonText: 'Header 2',\r\n\r\n                    ariaLabel: 'Header 2 Selection',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTextFormatClick(BlockFormatType.headingTwo),\r\n                    position: 'top',\r\n                    buttonStyle: '',\r\n                },\r\n                {\r\n                    key: 'header3',\r\n                    className: 'header3',\r\n                    value: 3,\r\n                    icon: '',\r\n                    tooltip: '',\r\n                    buttonText: 'Header 3',\r\n\r\n                    ariaLabel: 'Header 3 Selection',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTextFormatClick(BlockFormatType.headingThree),\r\n                    position: 'top',\r\n                    buttonStyle: '',\r\n                },\r\n                {\r\n                    key: 'header4',\r\n                    className: 'header4',\r\n                    value: 4,\r\n                    icon: '',\r\n                    tooltip: '',\r\n                    buttonText: 'Header 4',\r\n\r\n                    ariaLabel: 'Header 4 Selection',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTextFormatClick(BlockFormatType.headingFour),\r\n                    position: 'top',\r\n                    buttonStyle: '',\r\n                },\r\n                {\r\n                    key: 'blockquote',\r\n                    icon: '',\r\n                    tooltip: '',\r\n                    buttonText: \"Block Quote\",\r\n                    value: 'blockquote',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTextFormatClick(BlockFormatType.blockquote),\r\n                    ariaLabel: 'Block Quote formatting',\r\n                    position: 'top',\r\n                    buttonStyle: '',\r\n                },\r\n                {\r\n                    key: 'pullQuote',\r\n                    icon: '',\r\n                    tooltip: '',\r\n                    buttonText: \"Pull Quote\",\r\n                    value: 'pullQuote',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTextFormatClick(BlockFormatType.pullQuote),\r\n                    ariaLabel: 'Pull Quote formatting',\r\n                    position: 'top',\r\n                    buttonStyle: '',\r\n                },\r\n                {\r\n                    key: 'normal',\r\n                    className: 'normal',\r\n                    value: 'paragraph',\r\n                    icon: '',\r\n                    tooltip: '',\r\n                    buttonText: 'Normal',\r\n\r\n                    ariaLabel: 'Normal Selection',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTextFormatClick(BlockFormatType.paragraph),\r\n                    position: 'top',\r\n                    buttonStyle: '',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            key: 'textFontSize',\r\n            icon: '',\r\n            tooltip: '',\r\n            value: 'large',\r\n            ariaLabel: 'Text Alignment',\r\n            position: 'top',\r\n            buttonStyle: classes.selectEmpty,\r\n            childButtons: textFontSizeSelectionArray(fontSizeArray)\r\n        },\r\n        {\r\n            key: 'bold',\r\n            className: 'bold',\r\n            value: '',\r\n            icon: 'format_bold',\r\n            tooltip: 'Bold (Ctrl+B)',\r\n            buttonText: '',\r\n            ariaLabel: 'Bold Selection',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onStyleMarkClick(TextStyleType.bold),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'italic',\r\n            className: 'italic',\r\n            value: '',\r\n            icon: 'format_italic',\r\n            tooltip: 'Italic (Ctrl+I)',\r\n            buttonText: '',\r\n            ariaLabel: 'Italic Selection',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onStyleMarkClick(TextStyleType.italic),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'underline',\r\n            className: 'underline',\r\n            value: '',\r\n            icon: 'format_underline',\r\n            tooltip: 'underline (Ctrl+I)',\r\n            buttonText: '',\r\n            ariaLabel: 'underline Selection',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onStyleMarkClick(TextStyleType.underline),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'strike',\r\n            className: 'strike',\r\n            value: '',\r\n            icon: 'strikethrough_s',\r\n            tooltip: 'Strikethrough',\r\n            buttonText: '',\r\n            ariaLabel: 'Strike Through Selection',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onStyleMarkClick(TextStyleType.strike),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'superscript',\r\n            className: 'script',\r\n            value: 'super',\r\n            icon: 'superscript',\r\n            tooltip: 'Superscript',\r\n            buttonText: '',\r\n            ariaLabel: 'Superscript Selection',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onScriptStyleMarkClick(TextStyleType.super),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'subscript',\r\n            className: 'script',\r\n            value: 'sub',\r\n            icon: 'subscript',\r\n            tooltip: 'Subscript',\r\n            buttonText: '',\r\n            ariaLabel: 'Subscript Selection',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onScriptStyleMarkClick(TextStyleType.sub),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'bulleted',\r\n            className: 'list',\r\n            value: 'bulleted',\r\n            icon: 'format_list_bulleted',\r\n            tooltip: 'Bulleted List',\r\n            buttonText: '',\r\n            ariaLabel: 'Bulleted List',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onListClick(ListFormatType.bulletedList),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'ordered',\r\n            className: 'list',\r\n            value: 'ordered',\r\n            icon: 'format_list_numbered',\r\n            tooltip: 'Ordered List',\r\n            buttonText: '',\r\n            ariaLabel: 'Ordered List',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onListClick(ListFormatType.orderedList),\r\n            position: 'top',\r\n            buttonStyle: `${classes.cmdButton}`,\r\n        },\r\n        {\r\n            key: 'textAlign',\r\n            icon: 'format_align_justify',\r\n            tooltip: '',\r\n            value: state.alignment,\r\n            ariaLabel: 'Text Alignment',\r\n            position: 'top',\r\n            buttonStyle: classes.selectEmpty,\r\n            childButtons: [\r\n                {\r\n                    key: 'left',\r\n                    icon: 'format_align_left',\r\n                    tooltip: 'Align Left',\r\n                    ariaLabel: 'Align Left',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onAlignmentClick(TextAlignmentType.left),\r\n                    position: 'right',\r\n                    value: 'left',\r\n                    buttonStyle: classes.cmdButton\r\n                },\r\n                {\r\n                    key: 'center',\r\n                    icon: 'format_align_center',\r\n                    tooltip: 'Align Center',\r\n                    ariaLabel: 'Align Center',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onAlignmentClick(TextAlignmentType.center),\r\n                    position: 'right',\r\n                    value: 'center',\r\n                    buttonStyle: classes.cmdButton\r\n                },\r\n                {\r\n                    key: 'justify',\r\n                    icon: 'format_align_justify',\r\n                    tooltip: 'Justify',\r\n                    ariaLabel: 'Justify',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onAlignmentClick(TextAlignmentType.justify),\r\n                    position: 'right',\r\n                    value: 'justify',\r\n                    buttonStyle: classes.cmdButton\r\n                },\r\n                {\r\n                    key: 'right',\r\n                    icon: 'format_align_right',\r\n                    tooltip: 'Align Right',\r\n                    ariaLabel: 'Align Right',\r\n                    callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onAlignmentClick(TextAlignmentType.right),\r\n                    position: 'right',\r\n                    value: 'right',\r\n                    buttonStyle: classes.cmdButton\r\n                },\r\n\r\n            ]\r\n        },\r\n        {\r\n            key: 'table_insert',\r\n            icon: 'table_chart',\r\n            tooltip: 'Add table',\r\n            disabled: true,\r\n            ariaLabel: 'Add Table.',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onTableInsert(),\r\n            position: 'top',\r\n            value: '',\r\n            buttonStyle: classes.cmdButton\r\n        },\r\n        {\r\n            key: 'indent_left',\r\n            icon: 'format_indent_decrease',\r\n            tooltip: 'Indent left',\r\n            ariaLabel: 'Indent left',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onChangeIndentClick(IndentDirType.left),\r\n            position: 'top',\r\n            value: 'indent_left',\r\n            buttonStyle: classes.cmdButton\r\n        },\r\n        {\r\n            key: 'indent_right',\r\n            icon: 'format_indent_increase',\r\n            tooltip: 'Indent right',\r\n            ariaLabel: 'Indent right',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onChangeIndentClick(IndentDirType.right),\r\n            position: 'top',\r\n            value: 'indent_right',\r\n            buttonStyle: classes.cmdButton\r\n        },\r\n        {\r\n            key: 'format_clear',\r\n            icon: 'format_clear',\r\n            tooltip: 'Format Clear',\r\n            ariaLabel: 'Clear all formatting',\r\n            callback: () => CustomEditor._onClearFormattingClick(),\r\n            position: 'top',\r\n            buttonStyle: classes.cmdButton\r\n        },\r\n        {\r\n            key: 'horizontal_line',\r\n            icon: '',\r\n            tooltip: 'Horizontal line',\r\n            buttonText: '<hr/>',\r\n            ariaLabel: 'Add horizontal line',\r\n            callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onHrInsert(),\r\n            position: 'top',\r\n            buttonStyle: classes.cmdButton\r\n        },\r\n        // {\r\n        //     key: 'contents',\r\n        //     icon: '',\r\n        //     tooltip: 'Get Contents',\r\n        //     buttonText: 'Contents',\r\n        //     ariaLabel: 'Get Contents',\r\n        //     callback: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => CustomEditor._onOpenSource(),\r\n        //     position: 'top',\r\n        //     buttonStyle: classes.cmdButton\r\n        // },\r\n    ];\r\n\r\n    const FontColorButtons: any = {\r\n        textFormat: {\r\n            key: 'text_format',\r\n            icon: '',\r\n            tooltip: 'Format text color',\r\n            ariaLabel: 'Format text color',\r\n            callback: null,\r\n            buttonText: 'A',\r\n            position: 'top',\r\n            buttonStyle: classes.cmdButton\r\n        },\r\n        highlight: {\r\n            key: 'highlight',\r\n            icon: 'create',\r\n            tooltip: 'Highlight text',\r\n            ariaLabel: 'Highlight text',\r\n            callback: null,\r\n            position: 'top',\r\n            buttonStyle: classes.cmdButton\r\n        }\r\n    }\r\n\r\n    const renderToolbarButtons = () => {\r\n        // debugger;\r\n        const quill = getEditor()\r\n        const toolbarButtons: any[] = []\r\n        toolbarArray.forEach((element: IToolbarButton) => {\r\n            toolbarButtons.push(CreateStyleButton(element))\r\n        });\r\n        // add Abbr btn\r\n        toolbarButtons.push(<AbbrDialog key=\"dialog_abbr\" quillEditor={quill} btnStyle={classes.cmdButton} callback={CustomEditor._onAbbrInsert}></AbbrDialog>);\r\n        toolbarButtons.push(\r\n            <LinkDialog key=\"dialog_link\" quillEditor={quill} btnStyle={classes.cmdButton} callback={CustomEditor._onLinkInsert}></LinkDialog>\r\n        );\r\n        toolbarButtons.push(\r\n            <ImageDialog key=\"image_insert\" quillEditor={getEditor()} btnStyle={classes.cmdButton} callback={CustomEditor._onInsertImage}></ImageDialog>\r\n        );\r\n        toolbarButtons.push(\r\n            <FontColorButton defaultColor={state.fontColor} key=\"fontTextFormatColor\" callback={(color: string, type: FontColorButtonType) => CustomEditor._onTextFormatColor(color, type)} buttonType=\"Font\" buttonParams={FontColorButtons.textFormat}></FontColorButton>\r\n        );\r\n        toolbarButtons.push(\r\n            <FontColorButton defaultColor={state.highlightColor} key=\"fontTextFormatHighlight\" callback={(color: string, type: FontColorButtonType) => CustomEditor._onTextFormatColor(color, type)} buttonType=\"Highlight\" buttonParams={FontColorButtons.highlight}></FontColorButton>\r\n        );\r\n        return toolbarButtons\r\n\r\n    }\r\n    const render = () => {\r\n        console.log('toolbar render');\r\n        // console.log('Editor Ref: ', getEditor());\r\n        return (\r\n            <div id={props.id} className={`${classes.flexGrow1} ${props.editing ? \"\" : classes.displayNone}`}>\r\n                <div className={`${props?.toolbarStyle ? props.toolbarStyle : classes.toolbar}`}>\r\n                    {renderToolbarButtons()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return render();\r\n}\r\n","import React, { useState } from 'react'\r\nimport QuillEditor from \"./QuillEditor/QuillEditor\";\r\nimport CustomToolbar from \"./CustomToolbar/CustomToolbar\";\r\nimport { IRichText } from './model/RichText';\r\nimport './RichTextEditor.css'\r\nimport { createGenerateClassName, StylesProvider } from '@material-ui/core/styles';\r\nconst randNum = Math.floor(Math.random() * 1000)\r\n\r\nexport function RichTextEditor(props: IRichText) {\r\n    let toolbarId = `toolbar_${randNum}`;\r\n    const editorId = `quillEditor_${randNum}`;\r\n    const id = props.id === undefined ? \"rich_text_editor\" : props.id;\r\n    const [editorRefState, setEditorRefState] = useState(null)\r\n    const handleIncomingRef = (ref: any) => {\r\n        // console.log(\"ref handled\", ref);\r\n        setEditorRefState(ref)\r\n    }\r\n\r\n    const handleIncomingContent = (_data: any) => {\r\n        if (props.callback !== undefined) {\r\n            props.callback(_data);\r\n        }\r\n    }\r\n\r\n    const generateClassName = createGenerateClassName({\r\n        productionPrefix: \"rte\",\r\n        // seed: \"rec\",\r\n        // disableGlobal: true\r\n    });\r\n    const render = () => {\r\n        let value = props.value === undefined ? \"\" : props.value;\r\n        return (\r\n            <div id={id}>\r\n                {/* <StylesProvider generateClassName={generateClassName}> */}\r\n                    <CustomToolbar editing={props.editing} editorRef={editorRefState} id={toolbarId} editorId={editorId} />\r\n                {/* </StylesProvider> */}\r\n                <QuillEditor value={value} callback={handleIncomingRef} contentCallback={handleIncomingContent} editorId={editorId} toolbarId={toolbarId} editing={props.editing} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return render();\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { DataTable, IHeaderProps, MarkdownEditor, RichTextEditor } from \"./core/index\";\r\nimport { Switch, makeStyles, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Typography } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Column, Label, MainContainer, Row } from './core/Styles/CommonStyles';\r\n\r\nexport interface IItem {\r\n  id: number,\r\n  department: string,\r\n  name: string\r\n}\r\n\r\nconst customStyle = {\r\n  header: 'headerStyle1',\r\n  headerCell: \"headerCellStyle1\",\r\n  bodyCell: \"bodyCellStyle1\"\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  idRow: {\r\n    textAlign: \"center\"\r\n  }\r\n})\r\n\r\n\r\nfunction App() {\r\n  console.log(\"App...\");\r\n  const classes = useStyles();\r\n  const headers: IHeaderProps[] = [\r\n    {\r\n      key: \"id\",\r\n      text: \"ID\",\r\n      cell: (row: IItem) => <div className={classes.idRow}>{row.id}</div>\r\n    },\r\n    {\r\n      key: \"department\",\r\n      text: \"Department\",\r\n      cell: (row: IItem) => `${row.department}`\r\n    },\r\n    {\r\n      key: \"name\",\r\n      text: \"Name\",\r\n      cell: (row: IItem) => `${row.name}`\r\n    },\r\n    {\r\n      key: \"actions\",\r\n      text: \"actions\",\r\n      cell: (row: IItem) => <button>Edit</button>,\r\n      sort: false\r\n    }\r\n  ]\r\n\r\n\r\n  const items: IItem[] = [\r\n    {\r\n      id: 0,\r\n      department: \"Development\",\r\n      name: \"John Smith\",\r\n    },\r\n    {\r\n      id: 1,\r\n      department: \"Development\",\r\n      name: \"Jane Doe\",\r\n    }, {\r\n      id: 2,\r\n      department: \"Management\",\r\n      name: \"Bruce Wayne\",\r\n    },\r\n    {\r\n      id: 3,\r\n      department: \"Advertising\",\r\n      name: \"Clark Kent\",\r\n    },\r\n    {\r\n      id: 4,\r\n      department: \"Security\",\r\n      name: \"Jim Gordon\",\r\n    },\r\n    {\r\n      id: 5,\r\n      department: \"Marketing\",\r\n      name: \"Barbara Gordon\",\r\n    },\r\n    {\r\n      id: 6,\r\n      department: \"Procurement\",\r\n      name: \"Selena Kyle\",\r\n    },\r\n    {\r\n      id: 7,\r\n      department: \"Landscaping\",\r\n      name: \"Pamela Ivy\",\r\n    },\r\n    {\r\n      id: 8,\r\n      department: \"Research\",\r\n      name: \"Lucius Fox\",\r\n    }\r\n  ]\r\n  const handleIncomingData = (data: IItem) => {\r\n    console.log(\"Data retrieved: \", data);\r\n\r\n  }\r\n  const [state, setState] = useState({\r\n    checkbox: true,\r\n    multiSort: false,\r\n    filter: true,\r\n    emptySpacing: false,\r\n    editor: true\r\n  })\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked })\r\n  }\r\n\r\n  const renderCheckBoxSwitch = () => {\r\n    return (\r\n      <Switch\r\n        checked={state.checkbox}\r\n        onChange={handleChange}\r\n        inputProps={{\r\n          'aria-label': 'Switch to enable checkbox property.'\r\n        }}\r\n        name=\"checkbox\"\r\n      />)\r\n  }\r\n\r\n  const renderMultiSortSwitch = () => {\r\n    return (\r\n      <Switch\r\n        checked={state.multiSort}\r\n        onChange={handleChange}\r\n        inputProps={{\r\n          'aria-label': 'Switch to enable multi-sort property.'\r\n        }}\r\n        name=\"multiSort\"\r\n      />)\r\n  }\r\n  const renderFilterSwitch = () => {\r\n    return (\r\n      <Switch\r\n        checked={state.filter}\r\n        onChange={handleChange}\r\n        inputProps={{\r\n          'aria-label': 'Switch to enable filter property.'\r\n        }}\r\n        name=\"filter\"\r\n      />)\r\n  }\r\n  const renderSpacingSwitch = () => {\r\n    return (\r\n      <Switch\r\n        checked={state.emptySpacing}\r\n        onChange={handleChange}\r\n        inputProps={{\r\n          'aria-label': 'Switch to enable empty spacing property.'\r\n        }}\r\n        name=\"emptySpacing\"\r\n      />)\r\n  }\r\n\r\n  const renderEditorSwitch = () => {\r\n    return (\r\n      <Switch\r\n        checked={state.editor}\r\n        onChange={handleChange}\r\n        inputProps={{\r\n          'aria-label': 'Switch to enable/disable rich text editor edit mode.'\r\n        }}\r\n        name=\"editor\"\r\n      />)\r\n  }\r\n\r\n  const dataTableExpansionPanel = () => {\r\n    return (\r\n      <ExpansionPanel >\r\n        <ExpansionPanelSummary className={'LightGrayB'} expandIcon={<ExpandMoreIcon />}>\r\n          <Typography>Data Table</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <div className={'FullWidth'}>\r\n            <div className={'Spacing'}>\r\n              <div>\r\n                Checkbox: {renderCheckBoxSwitch()}\r\n              </div>\r\n              <div>\r\n                Multi-Sort: {renderMultiSortSwitch()}\r\n              </div>\r\n              <div>\r\n                Empty Spacing: {renderSpacingSwitch()}\r\n              </div>\r\n              <div>\r\n                Filter: {renderFilterSwitch()}\r\n              </div>\r\n            </div>\r\n            <DataTable multiSort={state.multiSort} headers={headers} customStyle={customStyle} dataSource={items} emit={(data: IItem) => handleIncomingData(data)} checkbox={state.checkbox} itemKey=\"id\" filter={state.filter} emptySpacing={state.emptySpacing}></DataTable>\r\n          </div>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    )\r\n  }\r\n\r\n  const richTextEditorExpansionPanel = () => {\r\n    return (\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary className={'LightGrayB'} expandIcon={<ExpandMoreIcon />}>\r\n          <Typography>\r\n            Rich Text Editor\r\n        </Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <div className={'FullWidth'}>\r\n            <div className={'Spacing'}>\r\n              <div>\r\n                Edit mode {state.editor ? '(ON)' : \"(OFF)\"}: {renderEditorSwitch()}\r\n              </div>\r\n            </div>\r\n            <RichTextEditor editing={state.editor}\r\n              value={`<p>New Tab <a class=\"rec-a\" href=\"https://www.google.ca/\" rel=\"noopener noreferrer\" title=\"Discussion Board\">Content</a></p>`}\r\n            ></RichTextEditor>\r\n          </div>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    )\r\n  }\r\n\r\n\r\n  const [edit, setEdit] = useState(true);\r\n  const [borderPreview, setBorderPreview] = useState(true);\r\n  const toggleEditMode = () => {\r\n    setEdit(!edit)\r\n  }\r\n\r\n  const toggleBorderPreview = () => {\r\n    setBorderPreview(!borderPreview)\r\n  }\r\n  const content = `*[html]:hypertext\\n\\n*[test]:testing\\n\\n[google]: https://www.google.ca \"google\"\\n\\n**test** [google] html\\n\\n## Heading\r\n\r\n| Column 1       | Column 2     | Column 3     |\r\n|:---------------|:------------:|-------------:|\r\n|  Cell Contents | More Stuff   | And Again    |\r\n| You Can Also   | Put Pipes In <br/>html| Like this  \\\\||\r\n\r\n**!!testing!!**\r\n`\r\n\r\n  const markdownEditorExpansionPanel = () => {\r\n    return (\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary className={'LightGrayB'} expandIcon={<ExpandMoreIcon />}>\r\n          <Typography>\r\n            Markdown Editor\r\n      </Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <div className={'FullWidth'}>\r\n            <div className={'Spacing'}>\r\n              <MainContainer>\r\n                <div className=\"centerAlign\">\r\n                  <h1>Markdown editor with Abbreviation plugin</h1>\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"edit_mode\">Editable:</Label>\r\n                  <input type=\"checkbox\" name=\"edit_mode\" id=\"edit_mode\" checked={edit} onChange={toggleEditMode} />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"border_preview\">Border on Preview:</Label>\r\n                  <input type=\"checkbox\" name=\"border_preview\" id=\"border_preview\" checked={borderPreview} onChange={toggleBorderPreview} />\r\n                </div>\r\n\r\n                <Row flex={0} maxHeight={\"800px\"}>\r\n                  <MarkdownEditor\r\n                    maxEditorHeight={\"700px\"}\r\n                    borderedPreview={borderPreview}\r\n                    content={content}\r\n                    editable={edit}\r\n                  ></MarkdownEditor>\r\n                </Row>\r\n              </MainContainer>\r\n            </div>\r\n          </div>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    )\r\n  };\r\n\r\n  return (\r\n\r\n    <div className={'Padding25px'}>\r\n      {dataTableExpansionPanel()}\r\n      {richTextEditorExpansionPanel()}\r\n      {markdownEditorExpansionPanel()}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}